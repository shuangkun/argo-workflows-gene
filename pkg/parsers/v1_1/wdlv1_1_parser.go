// Code generated from java-escape by ANTLR 4.11.1. DO NOT EDIT.

package v1_1 // WdlV1_1Parser
import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr/antlr4/runtime/Go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type WdlV1_1Parser struct {
	*antlr.BaseParser
}

var wdlv1_1parserParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	literalNames           []string
	symbolicNames          []string
	ruleNames              []string
	predictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func wdlv1_1parserParserInit() {
	staticData := &wdlv1_1parserParserStaticData
	staticData.literalNames = []string{
		"", "", "'version'", "'import'", "'workflow'", "'task'", "'struct'",
		"'scatter'", "'call'", "'if'", "'then'", "'else'", "'alias'", "'as'",
		"'in'", "'input'", "'output'", "'parameter_meta'", "'meta'", "'runtime'",
		"'Boolean'", "'Int'", "'Float'", "'String'", "'File'", "'Array'", "'Map'",
		"'Object'", "'object'", "'sep='", "'default='", "'Pair'", "'after'",
		"'command'", "'None'", "", "", "", "'('", "')'", "", "", "'['", "",
		"'\\'", "", "'<'", "'>'", "'>='", "'<='", "'=='", "'!='", "'='", "'&&'",
		"'||'", "'?'", "'*'", "'+'", "'-'", "", "", "';'", "'.'", "'!'", "",
		"'/'", "'%'", "", "", "", "", "", "", "'<<<'", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "'null'", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"'\\>>>'",
	}
	staticData.symbolicNames = []string{
		"", "LINE_COMMENT", "VERSION", "IMPORT", "WORKFLOW", "TASK", "STRUCT",
		"SCATTER", "CALL", "IF", "THEN", "ELSE", "ALIAS", "AS", "In", "INPUT",
		"OUTPUT", "PARAMETERMETA", "META", "RUNTIME", "BOOLEAN", "INT", "FLOAT",
		"STRING", "FILE", "ARRAY", "MAP", "OBJECT", "OBJECTLITERAL", "SEPEQUAL",
		"DEFAULTEQUAL", "PAIR", "AFTER", "COMMAND", "NONELITERAL", "IntLiteral",
		"FloatLiteral", "BoolLiteral", "LPAREN", "RPAREN", "LBRACE", "RBRACE",
		"LBRACK", "RBRACK", "ESC", "COLON", "LT", "GT", "GTE", "LTE", "EQUALITY",
		"NOTEQUAL", "EQUAL", "AND", "OR", "OPTIONAL", "STAR", "PLUS", "MINUS",
		"DOLLAR", "COMMA", "SEMI", "DOT", "NOT", "TILDE", "DIVIDE", "MOD", "SQUOTE",
		"DQUOTE", "WHITESPACE", "Identifier", "StringPart", "BeginWhitespace",
		"BeginHereDoc", "BeginLBrace", "HereDocUnicodeEscape", "CommandUnicodeEscape",
		"StringCommandStart", "EndCommand", "CommandStringPart", "VersionWhitespace",
		"ReleaseVersion", "BeginMeta", "MetaWhitespace", "MetaBodyComment",
		"MetaIdentifier", "MetaColon", "EndMeta", "MetaBodyWhitespace", "MetaValueComment",
		"MetaBool", "MetaInt", "MetaFloat", "MetaNull", "MetaSquote", "MetaDquote",
		"MetaEmptyObject", "MetaEmptyArray", "MetaLbrack", "MetaLbrace", "MetaValueWhitespace",
		"MetaStringPart", "MetaArrayComment", "MetaArrayCommaRbrack", "MetaArrayComma",
		"MetaRbrack", "MetaArrayWhitespace", "MetaObjectIdentifier", "MetaObjectColon",
		"MetaObjectCommaRbrace", "MetaObjectComma", "MetaRbrace", "MetaObjectWhitespace",
		"HereDocEscapedEnd",
	}
	staticData.ruleNames = []string{
		"map_type", "array_type", "pair_type", "type_base", "wdl_type", "unbound_decls",
		"bound_decls", "any_decls", "number", "expression_placeholder_option",
		"string_part", "string_expr_part", "string_expr_with_string_part", "string",
		"primitive_literal", "expr", "expr_infix", "expr_infix0", "expr_infix1",
		"expr_infix2", "expr_infix3", "expr_infix4", "expr_infix5", "member",
		"expr_core", "version", "import_alias", "import_as", "import_doc", "struct",
		"meta_value", "meta_string_part", "meta_string", "meta_array", "meta_object",
		"meta_object_kv", "meta_kv", "parameter_meta", "meta", "task_runtime_kv",
		"task_runtime", "task_input", "task_output", "task_command_string_part",
		"task_command_expr_part", "task_command_expr_with_string", "task_command",
		"task_element", "task", "inner_workflow_element", "call_alias", "call_input",
		"call_inputs", "call_body", "call_after", "call_name", "call", "scatter",
		"conditional", "workflow_input", "workflow_output", "workflow_element",
		"workflow", "document_element", "document",
	}
	staticData.predictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 113, 831, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7,
		4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7,
		10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15,
		2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2,
		21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26,
		7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7,
		31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36,
		2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2,
		42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47,
		7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7,
		52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7, 57,
		2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 2,
		63, 7, 63, 2, 64, 7, 64, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 143, 8, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
		1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 3, 3, 3, 156, 8, 3, 1, 4, 1, 4, 1, 4,
		1, 4, 3, 4, 162, 8, 4, 1, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6,
		1, 7, 1, 7, 3, 7, 174, 8, 7, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9,
		1, 9, 3, 9, 184, 8, 9, 1, 9, 1, 9, 3, 9, 188, 8, 9, 1, 10, 5, 10, 191,
		8, 10, 10, 10, 12, 10, 194, 9, 10, 1, 11, 1, 11, 5, 11, 198, 8, 11, 10,
		11, 12, 11, 201, 9, 11, 1, 11, 1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 1, 13,
		1, 13, 1, 13, 5, 13, 212, 8, 13, 10, 13, 12, 13, 215, 9, 13, 1, 13, 1,
		13, 1, 13, 1, 13, 1, 13, 5, 13, 222, 8, 13, 10, 13, 12, 13, 225, 9, 13,
		1, 13, 1, 13, 3, 13, 229, 8, 13, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 3,
		14, 236, 8, 14, 1, 15, 1, 15, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 17,
		1, 17, 1, 17, 5, 17, 248, 8, 17, 10, 17, 12, 17, 251, 9, 17, 1, 18, 1,
		18, 1, 18, 1, 18, 1, 18, 1, 18, 5, 18, 259, 8, 18, 10, 18, 12, 18, 262,
		9, 18, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1,
		19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19,
		1, 19, 5, 19, 285, 8, 19, 10, 19, 12, 19, 288, 9, 19, 1, 20, 1, 20, 1,
		20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 5, 20, 299, 8, 20, 10, 20,
		12, 20, 302, 9, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1,
		21, 1, 21, 1, 21, 1, 21, 1, 21, 5, 21, 316, 8, 21, 10, 21, 12, 21, 319,
		9, 21, 1, 22, 1, 22, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1,
		24, 5, 24, 331, 8, 24, 10, 24, 12, 24, 334, 9, 24, 1, 24, 3, 24, 337, 8,
		24, 3, 24, 339, 8, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 5, 24, 346, 8,
		24, 10, 24, 12, 24, 349, 9, 24, 1, 24, 3, 24, 352, 8, 24, 5, 24, 354, 8,
		24, 10, 24, 12, 24, 357, 9, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24,
		1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 5,
		24, 375, 8, 24, 10, 24, 12, 24, 378, 9, 24, 1, 24, 3, 24, 381, 8, 24, 5,
		24, 383, 8, 24, 10, 24, 12, 24, 386, 9, 24, 1, 24, 1, 24, 1, 24, 1, 24,
		1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 5, 24, 399, 8, 24, 10,
		24, 12, 24, 402, 9, 24, 1, 24, 3, 24, 405, 8, 24, 5, 24, 407, 8, 24, 10,
		24, 12, 24, 410, 9, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24,
		1, 24, 1, 24, 1, 24, 1, 24, 5, 24, 423, 8, 24, 10, 24, 12, 24, 426, 9,
		24, 1, 24, 3, 24, 429, 8, 24, 5, 24, 431, 8, 24, 10, 24, 12, 24, 434, 9,
		24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24,
		1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 3, 24, 454, 8,
		24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 5, 24, 464,
		8, 24, 10, 24, 12, 24, 467, 9, 24, 1, 25, 1, 25, 1, 25, 1, 26, 1, 26, 1,
		26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28, 3, 28, 483,
		8, 28, 1, 28, 5, 28, 486, 8, 28, 10, 28, 12, 28, 489, 9, 28, 1, 29, 1,
		29, 1, 29, 1, 29, 5, 29, 495, 8, 29, 10, 29, 12, 29, 498, 9, 29, 1, 29,
		1, 29, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 3, 30, 509, 8,
		30, 1, 31, 5, 31, 512, 8, 31, 10, 31, 12, 31, 515, 9, 31, 1, 32, 1, 32,
		1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 3, 32, 525, 8, 32, 1, 33, 1,
		33, 1, 33, 1, 33, 1, 33, 5, 33, 532, 8, 33, 10, 33, 12, 33, 535, 9, 33,
		1, 33, 1, 33, 3, 33, 539, 8, 33, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 5,
		34, 546, 8, 34, 10, 34, 12, 34, 549, 9, 34, 1, 34, 1, 34, 3, 34, 553, 8,
		34, 1, 35, 1, 35, 1, 35, 1, 35, 1, 36, 1, 36, 1, 36, 1, 36, 1, 37, 1, 37,
		1, 37, 5, 37, 566, 8, 37, 10, 37, 12, 37, 569, 9, 37, 1, 37, 1, 37, 1,
		38, 1, 38, 1, 38, 5, 38, 576, 8, 38, 10, 38, 12, 38, 579, 9, 38, 1, 38,
		1, 38, 1, 39, 1, 39, 1, 39, 1, 39, 1, 40, 1, 40, 1, 40, 5, 40, 590, 8,
		40, 10, 40, 12, 40, 593, 9, 40, 1, 40, 1, 40, 1, 41, 1, 41, 1, 41, 5, 41,
		600, 8, 41, 10, 41, 12, 41, 603, 9, 41, 1, 41, 1, 41, 1, 42, 1, 42, 1,
		42, 5, 42, 610, 8, 42, 10, 42, 12, 42, 613, 9, 42, 1, 42, 1, 42, 1, 43,
		5, 43, 618, 8, 43, 10, 43, 12, 43, 621, 9, 43, 1, 44, 1, 44, 5, 44, 625,
		8, 44, 10, 44, 12, 44, 628, 9, 44, 1, 44, 1, 44, 1, 44, 1, 45, 1, 45, 1,
		45, 1, 46, 1, 46, 1, 46, 1, 46, 5, 46, 640, 8, 46, 10, 46, 12, 46, 643,
		9, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 5, 46, 651, 8, 46, 10,
		46, 12, 46, 654, 9, 46, 1, 46, 1, 46, 3, 46, 658, 8, 46, 1, 47, 1, 47,
		1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 3, 47, 667, 8, 47, 1, 48, 1, 48, 1,
		48, 1, 48, 4, 48, 673, 8, 48, 11, 48, 12, 48, 674, 1, 48, 1, 48, 1, 49,
		1, 49, 1, 49, 1, 49, 3, 49, 683, 8, 49, 1, 50, 1, 50, 1, 50, 1, 51, 1,
		51, 1, 51, 3, 51, 691, 8, 51, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 5, 52,
		698, 8, 52, 10, 52, 12, 52, 701, 9, 52, 1, 52, 3, 52, 704, 8, 52, 5, 52,
		706, 8, 52, 10, 52, 12, 52, 709, 9, 52, 1, 53, 1, 53, 3, 53, 713, 8, 53,
		1, 53, 1, 53, 1, 54, 1, 54, 1, 54, 1, 55, 1, 55, 1, 55, 5, 55, 723, 8,
		55, 10, 55, 12, 55, 726, 9, 55, 1, 56, 1, 56, 1, 56, 3, 56, 731, 8, 56,
		1, 56, 5, 56, 734, 8, 56, 10, 56, 12, 56, 737, 9, 56, 1, 56, 3, 56, 740,
		8, 56, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 5, 57, 750,
		8, 57, 10, 57, 12, 57, 753, 9, 57, 1, 57, 1, 57, 1, 58, 1, 58, 1, 58, 1,
		58, 1, 58, 1, 58, 5, 58, 763, 8, 58, 10, 58, 12, 58, 766, 9, 58, 1, 58,
		1, 58, 1, 59, 1, 59, 1, 59, 5, 59, 773, 8, 59, 10, 59, 12, 59, 776, 9,
		59, 1, 59, 1, 59, 1, 60, 1, 60, 1, 60, 5, 60, 783, 8, 60, 10, 60, 12, 60,
		786, 9, 60, 1, 60, 1, 60, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 3, 61, 795,
		8, 61, 1, 62, 1, 62, 1, 62, 1, 62, 5, 62, 801, 8, 62, 10, 62, 12, 62, 804,
		9, 62, 1, 62, 1, 62, 1, 63, 1, 63, 1, 63, 3, 63, 811, 8, 63, 1, 64, 1,
		64, 5, 64, 815, 8, 64, 10, 64, 12, 64, 818, 9, 64, 1, 64, 1, 64, 5, 64,
		822, 8, 64, 10, 64, 12, 64, 825, 9, 64, 3, 64, 827, 8, 64, 1, 64, 1, 64,
		1, 64, 0, 6, 34, 36, 38, 40, 42, 48, 65, 0, 2, 4, 6, 8, 10, 12, 14, 16,
		18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52,
		54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88,
		90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120,
		122, 124, 126, 128, 0, 5, 3, 0, 20, 24, 27, 27, 70, 70, 1, 0, 35, 36, 1,
		0, 57, 58, 2, 0, 103, 103, 105, 105, 2, 0, 109, 109, 111, 111, 882, 0,
		130, 1, 0, 0, 0, 2, 137, 1, 0, 0, 0, 4, 144, 1, 0, 0, 0, 6, 155, 1, 0,
		0, 0, 8, 161, 1, 0, 0, 0, 10, 163, 1, 0, 0, 0, 12, 166, 1, 0, 0, 0, 14,
		173, 1, 0, 0, 0, 16, 175, 1, 0, 0, 0, 18, 187, 1, 0, 0, 0, 20, 192, 1,
		0, 0, 0, 22, 195, 1, 0, 0, 0, 24, 205, 1, 0, 0, 0, 26, 228, 1, 0, 0, 0,
		28, 235, 1, 0, 0, 0, 30, 237, 1, 0, 0, 0, 32, 239, 1, 0, 0, 0, 34, 241,
		1, 0, 0, 0, 36, 252, 1, 0, 0, 0, 38, 263, 1, 0, 0, 0, 40, 289, 1, 0, 0,
		0, 42, 303, 1, 0, 0, 0, 44, 320, 1, 0, 0, 0, 46, 322, 1, 0, 0, 0, 48, 453,
		1, 0, 0, 0, 50, 468, 1, 0, 0, 0, 52, 471, 1, 0, 0, 0, 54, 476, 1, 0, 0,
		0, 56, 479, 1, 0, 0, 0, 58, 490, 1, 0, 0, 0, 60, 508, 1, 0, 0, 0, 62, 513,
		1, 0, 0, 0, 64, 524, 1, 0, 0, 0, 66, 538, 1, 0, 0, 0, 68, 552, 1, 0, 0,
		0, 70, 554, 1, 0, 0, 0, 72, 558, 1, 0, 0, 0, 74, 562, 1, 0, 0, 0, 76, 572,
		1, 0, 0, 0, 78, 582, 1, 0, 0, 0, 80, 586, 1, 0, 0, 0, 82, 596, 1, 0, 0,
		0, 84, 606, 1, 0, 0, 0, 86, 619, 1, 0, 0, 0, 88, 622, 1, 0, 0, 0, 90, 632,
		1, 0, 0, 0, 92, 657, 1, 0, 0, 0, 94, 666, 1, 0, 0, 0, 96, 668, 1, 0, 0,
		0, 98, 682, 1, 0, 0, 0, 100, 684, 1, 0, 0, 0, 102, 687, 1, 0, 0, 0, 104,
		692, 1, 0, 0, 0, 106, 710, 1, 0, 0, 0, 108, 716, 1, 0, 0, 0, 110, 719,
		1, 0, 0, 0, 112, 727, 1, 0, 0, 0, 114, 741, 1, 0, 0, 0, 116, 756, 1, 0,
		0, 0, 118, 769, 1, 0, 0, 0, 120, 779, 1, 0, 0, 0, 122, 794, 1, 0, 0, 0,
		124, 796, 1, 0, 0, 0, 126, 810, 1, 0, 0, 0, 128, 812, 1, 0, 0, 0, 130,
		131, 5, 26, 0, 0, 131, 132, 5, 42, 0, 0, 132, 133, 3, 8, 4, 0, 133, 134,
		5, 60, 0, 0, 134, 135, 3, 8, 4, 0, 135, 136, 5, 43, 0, 0, 136, 1, 1, 0,
		0, 0, 137, 138, 5, 25, 0, 0, 138, 139, 5, 42, 0, 0, 139, 140, 3, 8, 4,
		0, 140, 142, 5, 43, 0, 0, 141, 143, 5, 57, 0, 0, 142, 141, 1, 0, 0, 0,
		142, 143, 1, 0, 0, 0, 143, 3, 1, 0, 0, 0, 144, 145, 5, 31, 0, 0, 145, 146,
		5, 42, 0, 0, 146, 147, 3, 8, 4, 0, 147, 148, 5, 60, 0, 0, 148, 149, 3,
		8, 4, 0, 149, 150, 5, 43, 0, 0, 150, 5, 1, 0, 0, 0, 151, 156, 3, 2, 1,
		0, 152, 156, 3, 0, 0, 0, 153, 156, 3, 4, 2, 0, 154, 156, 7, 0, 0, 0, 155,
		151, 1, 0, 0, 0, 155, 152, 1, 0, 0, 0, 155, 153, 1, 0, 0, 0, 155, 154,
		1, 0, 0, 0, 156, 7, 1, 0, 0, 0, 157, 158, 3, 6, 3, 0, 158, 159, 5, 55,
		0, 0, 159, 162, 1, 0, 0, 0, 160, 162, 3, 6, 3, 0, 161, 157, 1, 0, 0, 0,
		161, 160, 1, 0, 0, 0, 162, 9, 1, 0, 0, 0, 163, 164, 3, 8, 4, 0, 164, 165,
		5, 70, 0, 0, 165, 11, 1, 0, 0, 0, 166, 167, 3, 8, 4, 0, 167, 168, 5, 70,
		0, 0, 168, 169, 5, 52, 0, 0, 169, 170, 3, 30, 15, 0, 170, 13, 1, 0, 0,
		0, 171, 174, 3, 10, 5, 0, 172, 174, 3, 12, 6, 0, 173, 171, 1, 0, 0, 0,
		173, 172, 1, 0, 0, 0, 174, 15, 1, 0, 0, 0, 175, 176, 7, 1, 0, 0, 176, 17,
		1, 0, 0, 0, 177, 178, 5, 37, 0, 0, 178, 179, 5, 52, 0, 0, 179, 188, 3,
		26, 13, 0, 180, 183, 5, 30, 0, 0, 181, 184, 3, 26, 13, 0, 182, 184, 3,
		16, 8, 0, 183, 181, 1, 0, 0, 0, 183, 182, 1, 0, 0, 0, 184, 188, 1, 0, 0,
		0, 185, 186, 5, 29, 0, 0, 186, 188, 3, 26, 13, 0, 187, 177, 1, 0, 0, 0,
		187, 180, 1, 0, 0, 0, 187, 185, 1, 0, 0, 0, 188, 19, 1, 0, 0, 0, 189, 191,
		5, 71, 0, 0, 190, 189, 1, 0, 0, 0, 191, 194, 1, 0, 0, 0, 192, 190, 1, 0,
		0, 0, 192, 193, 1, 0, 0, 0, 193, 21, 1, 0, 0, 0, 194, 192, 1, 0, 0, 0,
		195, 199, 5, 77, 0, 0, 196, 198, 3, 18, 9, 0, 197, 196, 1, 0, 0, 0, 198,
		201, 1, 0, 0, 0, 199, 197, 1, 0, 0, 0, 199, 200, 1, 0, 0, 0, 200, 202,
		1, 0, 0, 0, 201, 199, 1, 0, 0, 0, 202, 203, 3, 30, 15, 0, 203, 204, 5,
		41, 0, 0, 204, 23, 1, 0, 0, 0, 205, 206, 3, 22, 11, 0, 206, 207, 3, 20,
		10, 0, 207, 25, 1, 0, 0, 0, 208, 209, 5, 68, 0, 0, 209, 213, 3, 20, 10,
		0, 210, 212, 3, 24, 12, 0, 211, 210, 1, 0, 0, 0, 212, 215, 1, 0, 0, 0,
		213, 211, 1, 0, 0, 0, 213, 214, 1, 0, 0, 0, 214, 216, 1, 0, 0, 0, 215,
		213, 1, 0, 0, 0, 216, 217, 5, 68, 0, 0, 217, 229, 1, 0, 0, 0, 218, 219,
		5, 67, 0, 0, 219, 223, 3, 20, 10, 0, 220, 222, 3, 24, 12, 0, 221, 220,
		1, 0, 0, 0, 222, 225, 1, 0, 0, 0, 223, 221, 1, 0, 0, 0, 223, 224, 1, 0,
		0, 0, 224, 226, 1, 0, 0, 0, 225, 223, 1, 0, 0, 0, 226, 227, 5, 67, 0, 0,
		227, 229, 1, 0, 0, 0, 228, 208, 1, 0, 0, 0, 228, 218, 1, 0, 0, 0, 229,
		27, 1, 0, 0, 0, 230, 236, 5, 37, 0, 0, 231, 236, 3, 16, 8, 0, 232, 236,
		3, 26, 13, 0, 233, 236, 5, 34, 0, 0, 234, 236, 5, 70, 0, 0, 235, 230, 1,
		0, 0, 0, 235, 231, 1, 0, 0, 0, 235, 232, 1, 0, 0, 0, 235, 233, 1, 0, 0,
		0, 235, 234, 1, 0, 0, 0, 236, 29, 1, 0, 0, 0, 237, 238, 3, 32, 16, 0, 238,
		31, 1, 0, 0, 0, 239, 240, 3, 34, 17, 0, 240, 33, 1, 0, 0, 0, 241, 242,
		6, 17, -1, 0, 242, 243, 3, 36, 18, 0, 243, 249, 1, 0, 0, 0, 244, 245, 10,
		2, 0, 0, 245, 246, 5, 54, 0, 0, 246, 248, 3, 36, 18, 0, 247, 244, 1, 0,
		0, 0, 248, 251, 1, 0, 0, 0, 249, 247, 1, 0, 0, 0, 249, 250, 1, 0, 0, 0,
		250, 35, 1, 0, 0, 0, 251, 249, 1, 0, 0, 0, 252, 253, 6, 18, -1, 0, 253,
		254, 3, 38, 19, 0, 254, 260, 1, 0, 0, 0, 255, 256, 10, 2, 0, 0, 256, 257,
		5, 53, 0, 0, 257, 259, 3, 38, 19, 0, 258, 255, 1, 0, 0, 0, 259, 262, 1,
		0, 0, 0, 260, 258, 1, 0, 0, 0, 260, 261, 1, 0, 0, 0, 261, 37, 1, 0, 0,
		0, 262, 260, 1, 0, 0, 0, 263, 264, 6, 19, -1, 0, 264, 265, 3, 40, 20, 0,
		265, 286, 1, 0, 0, 0, 266, 267, 10, 7, 0, 0, 267, 268, 5, 50, 0, 0, 268,
		285, 3, 40, 20, 0, 269, 270, 10, 6, 0, 0, 270, 271, 5, 51, 0, 0, 271, 285,
		3, 40, 20, 0, 272, 273, 10, 5, 0, 0, 273, 274, 5, 49, 0, 0, 274, 285, 3,
		40, 20, 0, 275, 276, 10, 4, 0, 0, 276, 277, 5, 48, 0, 0, 277, 285, 3, 40,
		20, 0, 278, 279, 10, 3, 0, 0, 279, 280, 5, 46, 0, 0, 280, 285, 3, 40, 20,
		0, 281, 282, 10, 2, 0, 0, 282, 283, 5, 47, 0, 0, 283, 285, 3, 40, 20, 0,
		284, 266, 1, 0, 0, 0, 284, 269, 1, 0, 0, 0, 284, 272, 1, 0, 0, 0, 284,
		275, 1, 0, 0, 0, 284, 278, 1, 0, 0, 0, 284, 281, 1, 0, 0, 0, 285, 288,
		1, 0, 0, 0, 286, 284, 1, 0, 0, 0, 286, 287, 1, 0, 0, 0, 287, 39, 1, 0,
		0, 0, 288, 286, 1, 0, 0, 0, 289, 290, 6, 20, -1, 0, 290, 291, 3, 42, 21,
		0, 291, 300, 1, 0, 0, 0, 292, 293, 10, 3, 0, 0, 293, 294, 5, 57, 0, 0,
		294, 299, 3, 42, 21, 0, 295, 296, 10, 2, 0, 0, 296, 297, 5, 58, 0, 0, 297,
		299, 3, 42, 21, 0, 298, 292, 1, 0, 0, 0, 298, 295, 1, 0, 0, 0, 299, 302,
		1, 0, 0, 0, 300, 298, 1, 0, 0, 0, 300, 301, 1, 0, 0, 0, 301, 41, 1, 0,
		0, 0, 302, 300, 1, 0, 0, 0, 303, 304, 6, 21, -1, 0, 304, 305, 3, 44, 22,
		0, 305, 317, 1, 0, 0, 0, 306, 307, 10, 4, 0, 0, 307, 308, 5, 56, 0, 0,
		308, 316, 3, 44, 22, 0, 309, 310, 10, 3, 0, 0, 310, 311, 5, 65, 0, 0, 311,
		316, 3, 44, 22, 0, 312, 313, 10, 2, 0, 0, 313, 314, 5, 66, 0, 0, 314, 316,
		3, 44, 22, 0, 315, 306, 1, 0, 0, 0, 315, 309, 1, 0, 0, 0, 315, 312, 1,
		0, 0, 0, 316, 319, 1, 0, 0, 0, 317, 315, 1, 0, 0, 0, 317, 318, 1, 0, 0,
		0, 318, 43, 1, 0, 0, 0, 319, 317, 1, 0, 0, 0, 320, 321, 3, 48, 24, 0, 321,
		45, 1, 0, 0, 0, 322, 323, 5, 70, 0, 0, 323, 47, 1, 0, 0, 0, 324, 325, 6,
		24, -1, 0, 325, 326, 5, 70, 0, 0, 326, 338, 5, 38, 0, 0, 327, 332, 3, 30,
		15, 0, 328, 329, 5, 60, 0, 0, 329, 331, 3, 30, 15, 0, 330, 328, 1, 0, 0,
		0, 331, 334, 1, 0, 0, 0, 332, 330, 1, 0, 0, 0, 332, 333, 1, 0, 0, 0, 333,
		336, 1, 0, 0, 0, 334, 332, 1, 0, 0, 0, 335, 337, 5, 60, 0, 0, 336, 335,
		1, 0, 0, 0, 336, 337, 1, 0, 0, 0, 337, 339, 1, 0, 0, 0, 338, 327, 1, 0,
		0, 0, 338, 339, 1, 0, 0, 0, 339, 340, 1, 0, 0, 0, 340, 454, 5, 39, 0, 0,
		341, 355, 5, 42, 0, 0, 342, 347, 3, 30, 15, 0, 343, 344, 5, 60, 0, 0, 344,
		346, 3, 30, 15, 0, 345, 343, 1, 0, 0, 0, 346, 349, 1, 0, 0, 0, 347, 345,
		1, 0, 0, 0, 347, 348, 1, 0, 0, 0, 348, 351, 1, 0, 0, 0, 349, 347, 1, 0,
		0, 0, 350, 352, 5, 60, 0, 0, 351, 350, 1, 0, 0, 0, 351, 352, 1, 0, 0, 0,
		352, 354, 1, 0, 0, 0, 353, 342, 1, 0, 0, 0, 354, 357, 1, 0, 0, 0, 355,
		353, 1, 0, 0, 0, 355, 356, 1, 0, 0, 0, 356, 358, 1, 0, 0, 0, 357, 355,
		1, 0, 0, 0, 358, 454, 5, 43, 0, 0, 359, 360, 5, 38, 0, 0, 360, 361, 3,
		30, 15, 0, 361, 362, 5, 60, 0, 0, 362, 363, 3, 30, 15, 0, 363, 364, 5,
		39, 0, 0, 364, 454, 1, 0, 0, 0, 365, 384, 5, 40, 0, 0, 366, 367, 3, 30,
		15, 0, 367, 368, 5, 45, 0, 0, 368, 376, 3, 30, 15, 0, 369, 370, 5, 60,
		0, 0, 370, 371, 3, 30, 15, 0, 371, 372, 5, 45, 0, 0, 372, 373, 3, 30, 15,
		0, 373, 375, 1, 0, 0, 0, 374, 369, 1, 0, 0, 0, 375, 378, 1, 0, 0, 0, 376,
		374, 1, 0, 0, 0, 376, 377, 1, 0, 0, 0, 377, 380, 1, 0, 0, 0, 378, 376,
		1, 0, 0, 0, 379, 381, 5, 60, 0, 0, 380, 379, 1, 0, 0, 0, 380, 381, 1, 0,
		0, 0, 381, 383, 1, 0, 0, 0, 382, 366, 1, 0, 0, 0, 383, 386, 1, 0, 0, 0,
		384, 382, 1, 0, 0, 0, 384, 385, 1, 0, 0, 0, 385, 387, 1, 0, 0, 0, 386,
		384, 1, 0, 0, 0, 387, 454, 5, 41, 0, 0, 388, 389, 5, 28, 0, 0, 389, 408,
		5, 40, 0, 0, 390, 391, 3, 46, 23, 0, 391, 392, 5, 45, 0, 0, 392, 400, 3,
		30, 15, 0, 393, 394, 5, 60, 0, 0, 394, 395, 3, 46, 23, 0, 395, 396, 5,
		45, 0, 0, 396, 397, 3, 30, 15, 0, 397, 399, 1, 0, 0, 0, 398, 393, 1, 0,
		0, 0, 399, 402, 1, 0, 0, 0, 400, 398, 1, 0, 0, 0, 400, 401, 1, 0, 0, 0,
		401, 404, 1, 0, 0, 0, 402, 400, 1, 0, 0, 0, 403, 405, 5, 60, 0, 0, 404,
		403, 1, 0, 0, 0, 404, 405, 1, 0, 0, 0, 405, 407, 1, 0, 0, 0, 406, 390,
		1, 0, 0, 0, 407, 410, 1, 0, 0, 0, 408, 406, 1, 0, 0, 0, 408, 409, 1, 0,
		0, 0, 409, 411, 1, 0, 0, 0, 410, 408, 1, 0, 0, 0, 411, 454, 5, 41, 0, 0,
		412, 413, 5, 70, 0, 0, 413, 432, 5, 40, 0, 0, 414, 415, 3, 46, 23, 0, 415,
		416, 5, 45, 0, 0, 416, 424, 3, 30, 15, 0, 417, 418, 5, 60, 0, 0, 418, 419,
		3, 46, 23, 0, 419, 420, 5, 45, 0, 0, 420, 421, 3, 30, 15, 0, 421, 423,
		1, 0, 0, 0, 422, 417, 1, 0, 0, 0, 423, 426, 1, 0, 0, 0, 424, 422, 1, 0,
		0, 0, 424, 425, 1, 0, 0, 0, 425, 428, 1, 0, 0, 0, 426, 424, 1, 0, 0, 0,
		427, 429, 5, 60, 0, 0, 428, 427, 1, 0, 0, 0, 428, 429, 1, 0, 0, 0, 429,
		431, 1, 0, 0, 0, 430, 414, 1, 0, 0, 0, 431, 434, 1, 0, 0, 0, 432, 430,
		1, 0, 0, 0, 432, 433, 1, 0, 0, 0, 433, 435, 1, 0, 0, 0, 434, 432, 1, 0,
		0, 0, 435, 454, 5, 41, 0, 0, 436, 437, 5, 9, 0, 0, 437, 438, 3, 30, 15,
		0, 438, 439, 5, 10, 0, 0, 439, 440, 3, 30, 15, 0, 440, 441, 5, 11, 0, 0,
		441, 442, 3, 30, 15, 0, 442, 454, 1, 0, 0, 0, 443, 444, 5, 38, 0, 0, 444,
		445, 3, 30, 15, 0, 445, 446, 5, 39, 0, 0, 446, 454, 1, 0, 0, 0, 447, 448,
		5, 63, 0, 0, 448, 454, 3, 30, 15, 0, 449, 450, 7, 2, 0, 0, 450, 454, 3,
		30, 15, 0, 451, 454, 3, 28, 14, 0, 452, 454, 5, 70, 0, 0, 453, 324, 1,
		0, 0, 0, 453, 341, 1, 0, 0, 0, 453, 359, 1, 0, 0, 0, 453, 365, 1, 0, 0,
		0, 453, 388, 1, 0, 0, 0, 453, 412, 1, 0, 0, 0, 453, 436, 1, 0, 0, 0, 453,
		443, 1, 0, 0, 0, 453, 447, 1, 0, 0, 0, 453, 449, 1, 0, 0, 0, 453, 451,
		1, 0, 0, 0, 453, 452, 1, 0, 0, 0, 454, 465, 1, 0, 0, 0, 455, 456, 10, 6,
		0, 0, 456, 457, 5, 42, 0, 0, 457, 458, 3, 30, 15, 0, 458, 459, 5, 43, 0,
		0, 459, 464, 1, 0, 0, 0, 460, 461, 10, 5, 0, 0, 461, 462, 5, 62, 0, 0,
		462, 464, 5, 70, 0, 0, 463, 455, 1, 0, 0, 0, 463, 460, 1, 0, 0, 0, 464,
		467, 1, 0, 0, 0, 465, 463, 1, 0, 0, 0, 465, 466, 1, 0, 0, 0, 466, 49, 1,
		0, 0, 0, 467, 465, 1, 0, 0, 0, 468, 469, 5, 2, 0, 0, 469, 470, 5, 81, 0,
		0, 470, 51, 1, 0, 0, 0, 471, 472, 5, 12, 0, 0, 472, 473, 5, 70, 0, 0, 473,
		474, 5, 13, 0, 0, 474, 475, 5, 70, 0, 0, 475, 53, 1, 0, 0, 0, 476, 477,
		5, 13, 0, 0, 477, 478, 5, 70, 0, 0, 478, 55, 1, 0, 0, 0, 479, 480, 5, 3,
		0, 0, 480, 482, 3, 26, 13, 0, 481, 483, 3, 54, 27, 0, 482, 481, 1, 0, 0,
		0, 482, 483, 1, 0, 0, 0, 483, 487, 1, 0, 0, 0, 484, 486, 3, 52, 26, 0,
		485, 484, 1, 0, 0, 0, 486, 489, 1, 0, 0, 0, 487, 485, 1, 0, 0, 0, 487,
		488, 1, 0, 0, 0, 488, 57, 1, 0, 0, 0, 489, 487, 1, 0, 0, 0, 490, 491, 5,
		6, 0, 0, 491, 492, 5, 70, 0, 0, 492, 496, 5, 40, 0, 0, 493, 495, 3, 10,
		5, 0, 494, 493, 1, 0, 0, 0, 495, 498, 1, 0, 0, 0, 496, 494, 1, 0, 0, 0,
		496, 497, 1, 0, 0, 0, 497, 499, 1, 0, 0, 0, 498, 496, 1, 0, 0, 0, 499,
		500, 5, 41, 0, 0, 500, 59, 1, 0, 0, 0, 501, 509, 5, 93, 0, 0, 502, 509,
		5, 90, 0, 0, 503, 509, 5, 91, 0, 0, 504, 509, 5, 92, 0, 0, 505, 509, 3,
		64, 32, 0, 506, 509, 3, 68, 34, 0, 507, 509, 3, 66, 33, 0, 508, 501, 1,
		0, 0, 0, 508, 502, 1, 0, 0, 0, 508, 503, 1, 0, 0, 0, 508, 504, 1, 0, 0,
		0, 508, 505, 1, 0, 0, 0, 508, 506, 1, 0, 0, 0, 508, 507, 1, 0, 0, 0, 509,
		61, 1, 0, 0, 0, 510, 512, 5, 101, 0, 0, 511, 510, 1, 0, 0, 0, 512, 515,
		1, 0, 0, 0, 513, 511, 1, 0, 0, 0, 513, 514, 1, 0, 0, 0, 514, 63, 1, 0,
		0, 0, 515, 513, 1, 0, 0, 0, 516, 517, 5, 95, 0, 0, 517, 518, 3, 62, 31,
		0, 518, 519, 5, 95, 0, 0, 519, 525, 1, 0, 0, 0, 520, 521, 5, 94, 0, 0,
		521, 522, 3, 62, 31, 0, 522, 523, 5, 94, 0, 0, 523, 525, 1, 0, 0, 0, 524,
		516, 1, 0, 0, 0, 524, 520, 1, 0, 0, 0, 525, 65, 1, 0, 0, 0, 526, 539, 5,
		97, 0, 0, 527, 528, 5, 98, 0, 0, 528, 533, 3, 60, 30, 0, 529, 530, 5, 104,
		0, 0, 530, 532, 3, 60, 30, 0, 531, 529, 1, 0, 0, 0, 532, 535, 1, 0, 0,
		0, 533, 531, 1, 0, 0, 0, 533, 534, 1, 0, 0, 0, 534, 536, 1, 0, 0, 0, 535,
		533, 1, 0, 0, 0, 536, 537, 7, 3, 0, 0, 537, 539, 1, 0, 0, 0, 538, 526,
		1, 0, 0, 0, 538, 527, 1, 0, 0, 0, 539, 67, 1, 0, 0, 0, 540, 553, 5, 96,
		0, 0, 541, 542, 5, 99, 0, 0, 542, 547, 3, 70, 35, 0, 543, 544, 5, 110,
		0, 0, 544, 546, 3, 70, 35, 0, 545, 543, 1, 0, 0, 0, 546, 549, 1, 0, 0,
		0, 547, 545, 1, 0, 0, 0, 547, 548, 1, 0, 0, 0, 548, 550, 1, 0, 0, 0, 549,
		547, 1, 0, 0, 0, 550, 551, 7, 4, 0, 0, 551, 553, 1, 0, 0, 0, 552, 540,
		1, 0, 0, 0, 552, 541, 1, 0, 0, 0, 553, 69, 1, 0, 0, 0, 554, 555, 5, 107,
		0, 0, 555, 556, 5, 108, 0, 0, 556, 557, 3, 60, 30, 0, 557, 71, 1, 0, 0,
		0, 558, 559, 5, 85, 0, 0, 559, 560, 5, 86, 0, 0, 560, 561, 3, 60, 30, 0,
		561, 73, 1, 0, 0, 0, 562, 563, 5, 17, 0, 0, 563, 567, 5, 82, 0, 0, 564,
		566, 3, 72, 36, 0, 565, 564, 1, 0, 0, 0, 566, 569, 1, 0, 0, 0, 567, 565,
		1, 0, 0, 0, 567, 568, 1, 0, 0, 0, 568, 570, 1, 0, 0, 0, 569, 567, 1, 0,
		0, 0, 570, 571, 5, 87, 0, 0, 571, 75, 1, 0, 0, 0, 572, 573, 5, 18, 0, 0,
		573, 577, 5, 82, 0, 0, 574, 576, 3, 72, 36, 0, 575, 574, 1, 0, 0, 0, 576,
		579, 1, 0, 0, 0, 577, 575, 1, 0, 0, 0, 577, 578, 1, 0, 0, 0, 578, 580,
		1, 0, 0, 0, 579, 577, 1, 0, 0, 0, 580, 581, 5, 87, 0, 0, 581, 77, 1, 0,
		0, 0, 582, 583, 5, 70, 0, 0, 583, 584, 5, 45, 0, 0, 584, 585, 3, 30, 15,
		0, 585, 79, 1, 0, 0, 0, 586, 587, 5, 19, 0, 0, 587, 591, 5, 40, 0, 0, 588,
		590, 3, 78, 39, 0, 589, 588, 1, 0, 0, 0, 590, 593, 1, 0, 0, 0, 591, 589,
		1, 0, 0, 0, 591, 592, 1, 0, 0, 0, 592, 594, 1, 0, 0, 0, 593, 591, 1, 0,
		0, 0, 594, 595, 5, 41, 0, 0, 595, 81, 1, 0, 0, 0, 596, 597, 5, 15, 0, 0,
		597, 601, 5, 40, 0, 0, 598, 600, 3, 14, 7, 0, 599, 598, 1, 0, 0, 0, 600,
		603, 1, 0, 0, 0, 601, 599, 1, 0, 0, 0, 601, 602, 1, 0, 0, 0, 602, 604,
		1, 0, 0, 0, 603, 601, 1, 0, 0, 0, 604, 605, 5, 41, 0, 0, 605, 83, 1, 0,
		0, 0, 606, 607, 5, 16, 0, 0, 607, 611, 5, 40, 0, 0, 608, 610, 3, 12, 6,
		0, 609, 608, 1, 0, 0, 0, 610, 613, 1, 0, 0, 0, 611, 609, 1, 0, 0, 0, 611,
		612, 1, 0, 0, 0, 612, 614, 1, 0, 0, 0, 613, 611, 1, 0, 0, 0, 614, 615,
		5, 41, 0, 0, 615, 85, 1, 0, 0, 0, 616, 618, 5, 79, 0, 0, 617, 616, 1, 0,
		0, 0, 618, 621, 1, 0, 0, 0, 619, 617, 1, 0, 0, 0, 619, 620, 1, 0, 0, 0,
		620, 87, 1, 0, 0, 0, 621, 619, 1, 0, 0, 0, 622, 626, 5, 77, 0, 0, 623,
		625, 3, 18, 9, 0, 624, 623, 1, 0, 0, 0, 625, 628, 1, 0, 0, 0, 626, 624,
		1, 0, 0, 0, 626, 627, 1, 0, 0, 0, 627, 629, 1, 0, 0, 0, 628, 626, 1, 0,
		0, 0, 629, 630, 3, 30, 15, 0, 630, 631, 5, 41, 0, 0, 631, 89, 1, 0, 0,
		0, 632, 633, 3, 88, 44, 0, 633, 634, 3, 86, 43, 0, 634, 91, 1, 0, 0, 0,
		635, 636, 5, 33, 0, 0, 636, 637, 5, 74, 0, 0, 637, 641, 3, 86, 43, 0, 638,
		640, 3, 90, 45, 0, 639, 638, 1, 0, 0, 0, 640, 643, 1, 0, 0, 0, 641, 639,
		1, 0, 0, 0, 641, 642, 1, 0, 0, 0, 642, 644, 1, 0, 0, 0, 643, 641, 1, 0,
		0, 0, 644, 645, 5, 78, 0, 0, 645, 658, 1, 0, 0, 0, 646, 647, 5, 33, 0,
		0, 647, 648, 5, 73, 0, 0, 648, 652, 3, 86, 43, 0, 649, 651, 3, 90, 45,
		0, 650, 649, 1, 0, 0, 0, 651, 654, 1, 0, 0, 0, 652, 650, 1, 0, 0, 0, 652,
		653, 1, 0, 0, 0, 653, 655, 1, 0, 0, 0, 654, 652, 1, 0, 0, 0, 655, 656,
		5, 78, 0, 0, 656, 658, 1, 0, 0, 0, 657, 635, 1, 0, 0, 0, 657, 646, 1, 0,
		0, 0, 658, 93, 1, 0, 0, 0, 659, 667, 3, 82, 41, 0, 660, 667, 3, 84, 42,
		0, 661, 667, 3, 92, 46, 0, 662, 667, 3, 80, 40, 0, 663, 667, 3, 12, 6,
		0, 664, 667, 3, 74, 37, 0, 665, 667, 3, 76, 38, 0, 666, 659, 1, 0, 0, 0,
		666, 660, 1, 0, 0, 0, 666, 661, 1, 0, 0, 0, 666, 662, 1, 0, 0, 0, 666,
		663, 1, 0, 0, 0, 666, 664, 1, 0, 0, 0, 666, 665, 1, 0, 0, 0, 667, 95, 1,
		0, 0, 0, 668, 669, 5, 5, 0, 0, 669, 670, 5, 70, 0, 0, 670, 672, 5, 40,
		0, 0, 671, 673, 3, 94, 47, 0, 672, 671, 1, 0, 0, 0, 673, 674, 1, 0, 0,
		0, 674, 672, 1, 0, 0, 0, 674, 675, 1, 0, 0, 0, 675, 676, 1, 0, 0, 0, 676,
		677, 5, 41, 0, 0, 677, 97, 1, 0, 0, 0, 678, 683, 3, 12, 6, 0, 679, 683,
		3, 112, 56, 0, 680, 683, 3, 114, 57, 0, 681, 683, 3, 116, 58, 0, 682, 678,
		1, 0, 0, 0, 682, 679, 1, 0, 0, 0, 682, 680, 1, 0, 0, 0, 682, 681, 1, 0,
		0, 0, 683, 99, 1, 0, 0, 0, 684, 685, 5, 13, 0, 0, 685, 686, 5, 70, 0, 0,
		686, 101, 1, 0, 0, 0, 687, 690, 5, 70, 0, 0, 688, 689, 5, 52, 0, 0, 689,
		691, 3, 30, 15, 0, 690, 688, 1, 0, 0, 0, 690, 691, 1, 0, 0, 0, 691, 103,
		1, 0, 0, 0, 692, 693, 5, 15, 0, 0, 693, 707, 5, 45, 0, 0, 694, 699, 3,
		102, 51, 0, 695, 696, 5, 60, 0, 0, 696, 698, 3, 102, 51, 0, 697, 695, 1,
		0, 0, 0, 698, 701, 1, 0, 0, 0, 699, 697, 1, 0, 0, 0, 699, 700, 1, 0, 0,
		0, 700, 703, 1, 0, 0, 0, 701, 699, 1, 0, 0, 0, 702, 704, 5, 60, 0, 0, 703,
		702, 1, 0, 0, 0, 703, 704, 1, 0, 0, 0, 704, 706, 1, 0, 0, 0, 705, 694,
		1, 0, 0, 0, 706, 709, 1, 0, 0, 0, 707, 705, 1, 0, 0, 0, 707, 708, 1, 0,
		0, 0, 708, 105, 1, 0, 0, 0, 709, 707, 1, 0, 0, 0, 710, 712, 5, 40, 0, 0,
		711, 713, 3, 104, 52, 0, 712, 711, 1, 0, 0, 0, 712, 713, 1, 0, 0, 0, 713,
		714, 1, 0, 0, 0, 714, 715, 5, 41, 0, 0, 715, 107, 1, 0, 0, 0, 716, 717,
		5, 32, 0, 0, 717, 718, 5, 70, 0, 0, 718, 109, 1, 0, 0, 0, 719, 724, 5,
		70, 0, 0, 720, 721, 5, 62, 0, 0, 721, 723, 5, 70, 0, 0, 722, 720, 1, 0,
		0, 0, 723, 726, 1, 0, 0, 0, 724, 722, 1, 0, 0, 0, 724, 725, 1, 0, 0, 0,
		725, 111, 1, 0, 0, 0, 726, 724, 1, 0, 0, 0, 727, 728, 5, 8, 0, 0, 728,
		730, 3, 110, 55, 0, 729, 731, 3, 100, 50, 0, 730, 729, 1, 0, 0, 0, 730,
		731, 1, 0, 0, 0, 731, 735, 1, 0, 0, 0, 732, 734, 3, 108, 54, 0, 733, 732,
		1, 0, 0, 0, 734, 737, 1, 0, 0, 0, 735, 733, 1, 0, 0, 0, 735, 736, 1, 0,
		0, 0, 736, 739, 1, 0, 0, 0, 737, 735, 1, 0, 0, 0, 738, 740, 3, 106, 53,
		0, 739, 738, 1, 0, 0, 0, 739, 740, 1, 0, 0, 0, 740, 113, 1, 0, 0, 0, 741,
		742, 5, 7, 0, 0, 742, 743, 5, 38, 0, 0, 743, 744, 5, 70, 0, 0, 744, 745,
		5, 14, 0, 0, 745, 746, 3, 30, 15, 0, 746, 747, 5, 39, 0, 0, 747, 751, 5,
		40, 0, 0, 748, 750, 3, 98, 49, 0, 749, 748, 1, 0, 0, 0, 750, 753, 1, 0,
		0, 0, 751, 749, 1, 0, 0, 0, 751, 752, 1, 0, 0, 0, 752, 754, 1, 0, 0, 0,
		753, 751, 1, 0, 0, 0, 754, 755, 5, 41, 0, 0, 755, 115, 1, 0, 0, 0, 756,
		757, 5, 9, 0, 0, 757, 758, 5, 38, 0, 0, 758, 759, 3, 30, 15, 0, 759, 760,
		5, 39, 0, 0, 760, 764, 5, 40, 0, 0, 761, 763, 3, 98, 49, 0, 762, 761, 1,
		0, 0, 0, 763, 766, 1, 0, 0, 0, 764, 762, 1, 0, 0, 0, 764, 765, 1, 0, 0,
		0, 765, 767, 1, 0, 0, 0, 766, 764, 1, 0, 0, 0, 767, 768, 5, 41, 0, 0, 768,
		117, 1, 0, 0, 0, 769, 770, 5, 15, 0, 0, 770, 774, 5, 40, 0, 0, 771, 773,
		3, 14, 7, 0, 772, 771, 1, 0, 0, 0, 773, 776, 1, 0, 0, 0, 774, 772, 1, 0,
		0, 0, 774, 775, 1, 0, 0, 0, 775, 777, 1, 0, 0, 0, 776, 774, 1, 0, 0, 0,
		777, 778, 5, 41, 0, 0, 778, 119, 1, 0, 0, 0, 779, 780, 5, 16, 0, 0, 780,
		784, 5, 40, 0, 0, 781, 783, 3, 12, 6, 0, 782, 781, 1, 0, 0, 0, 783, 786,
		1, 0, 0, 0, 784, 782, 1, 0, 0, 0, 784, 785, 1, 0, 0, 0, 785, 787, 1, 0,
		0, 0, 786, 784, 1, 0, 0, 0, 787, 788, 5, 41, 0, 0, 788, 121, 1, 0, 0, 0,
		789, 795, 3, 118, 59, 0, 790, 795, 3, 120, 60, 0, 791, 795, 3, 98, 49,
		0, 792, 795, 3, 74, 37, 0, 793, 795, 3, 76, 38, 0, 794, 789, 1, 0, 0, 0,
		794, 790, 1, 0, 0, 0, 794, 791, 1, 0, 0, 0, 794, 792, 1, 0, 0, 0, 794,
		793, 1, 0, 0, 0, 795, 123, 1, 0, 0, 0, 796, 797, 5, 4, 0, 0, 797, 798,
		5, 70, 0, 0, 798, 802, 5, 40, 0, 0, 799, 801, 3, 122, 61, 0, 800, 799,
		1, 0, 0, 0, 801, 804, 1, 0, 0, 0, 802, 800, 1, 0, 0, 0, 802, 803, 1, 0,
		0, 0, 803, 805, 1, 0, 0, 0, 804, 802, 1, 0, 0, 0, 805, 806, 5, 41, 0, 0,
		806, 125, 1, 0, 0, 0, 807, 811, 3, 56, 28, 0, 808, 811, 3, 58, 29, 0, 809,
		811, 3, 96, 48, 0, 810, 807, 1, 0, 0, 0, 810, 808, 1, 0, 0, 0, 810, 809,
		1, 0, 0, 0, 811, 127, 1, 0, 0, 0, 812, 816, 3, 50, 25, 0, 813, 815, 3,
		126, 63, 0, 814, 813, 1, 0, 0, 0, 815, 818, 1, 0, 0, 0, 816, 814, 1, 0,
		0, 0, 816, 817, 1, 0, 0, 0, 817, 826, 1, 0, 0, 0, 818, 816, 1, 0, 0, 0,
		819, 823, 3, 124, 62, 0, 820, 822, 3, 126, 63, 0, 821, 820, 1, 0, 0, 0,
		822, 825, 1, 0, 0, 0, 823, 821, 1, 0, 0, 0, 823, 824, 1, 0, 0, 0, 824,
		827, 1, 0, 0, 0, 825, 823, 1, 0, 0, 0, 826, 819, 1, 0, 0, 0, 826, 827,
		1, 0, 0, 0, 827, 828, 1, 0, 0, 0, 828, 829, 5, 0, 0, 1, 829, 129, 1, 0,
		0, 0, 80, 142, 155, 161, 173, 183, 187, 192, 199, 213, 223, 228, 235, 249,
		260, 284, 286, 298, 300, 315, 317, 332, 336, 338, 347, 351, 355, 376, 380,
		384, 400, 404, 408, 424, 428, 432, 453, 463, 465, 482, 487, 496, 508, 513,
		524, 533, 538, 547, 552, 567, 577, 591, 601, 611, 619, 626, 641, 652, 657,
		666, 674, 682, 690, 699, 703, 707, 712, 724, 730, 735, 739, 751, 764, 774,
		784, 794, 802, 810, 816, 823, 826,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// WdlV1_1ParserInit initializes any static state used to implement WdlV1_1Parser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewWdlV1_1Parser(). You can call this function if you wish to initialize the static state ahead
// of time.
func WdlV1_1ParserInit() {
	staticData := &wdlv1_1parserParserStaticData
	staticData.once.Do(wdlv1_1parserParserInit)
}

// NewWdlV1_1Parser produces a new parser instance for the optional input antlr.TokenStream.
func NewWdlV1_1Parser(input antlr.TokenStream) *WdlV1_1Parser {
	WdlV1_1ParserInit()
	this := new(WdlV1_1Parser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &wdlv1_1parserParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.predictionContextCache)
	this.RuleNames = staticData.ruleNames
	this.LiteralNames = staticData.literalNames
	this.SymbolicNames = staticData.symbolicNames
	this.GrammarFileName = "java-escape"

	return this
}

// WdlV1_1Parser tokens.
const (
	WdlV1_1ParserEOF                   = antlr.TokenEOF
	WdlV1_1ParserLINE_COMMENT          = 1
	WdlV1_1ParserVERSION               = 2
	WdlV1_1ParserIMPORT                = 3
	WdlV1_1ParserWORKFLOW              = 4
	WdlV1_1ParserTASK                  = 5
	WdlV1_1ParserSTRUCT                = 6
	WdlV1_1ParserSCATTER               = 7
	WdlV1_1ParserCALL                  = 8
	WdlV1_1ParserIF                    = 9
	WdlV1_1ParserTHEN                  = 10
	WdlV1_1ParserELSE                  = 11
	WdlV1_1ParserALIAS                 = 12
	WdlV1_1ParserAS                    = 13
	WdlV1_1ParserIn                    = 14
	WdlV1_1ParserINPUT                 = 15
	WdlV1_1ParserOUTPUT                = 16
	WdlV1_1ParserPARAMETERMETA         = 17
	WdlV1_1ParserMETA                  = 18
	WdlV1_1ParserRUNTIME               = 19
	WdlV1_1ParserBOOLEAN               = 20
	WdlV1_1ParserINT                   = 21
	WdlV1_1ParserFLOAT                 = 22
	WdlV1_1ParserSTRING                = 23
	WdlV1_1ParserFILE                  = 24
	WdlV1_1ParserARRAY                 = 25
	WdlV1_1ParserMAP                   = 26
	WdlV1_1ParserOBJECT                = 27
	WdlV1_1ParserOBJECTLITERAL         = 28
	WdlV1_1ParserSEPEQUAL              = 29
	WdlV1_1ParserDEFAULTEQUAL          = 30
	WdlV1_1ParserPAIR                  = 31
	WdlV1_1ParserAFTER                 = 32
	WdlV1_1ParserCOMMAND               = 33
	WdlV1_1ParserNONELITERAL           = 34
	WdlV1_1ParserIntLiteral            = 35
	WdlV1_1ParserFloatLiteral          = 36
	WdlV1_1ParserBoolLiteral           = 37
	WdlV1_1ParserLPAREN                = 38
	WdlV1_1ParserRPAREN                = 39
	WdlV1_1ParserLBRACE                = 40
	WdlV1_1ParserRBRACE                = 41
	WdlV1_1ParserLBRACK                = 42
	WdlV1_1ParserRBRACK                = 43
	WdlV1_1ParserESC                   = 44
	WdlV1_1ParserCOLON                 = 45
	WdlV1_1ParserLT                    = 46
	WdlV1_1ParserGT                    = 47
	WdlV1_1ParserGTE                   = 48
	WdlV1_1ParserLTE                   = 49
	WdlV1_1ParserEQUALITY              = 50
	WdlV1_1ParserNOTEQUAL              = 51
	WdlV1_1ParserEQUAL                 = 52
	WdlV1_1ParserAND                   = 53
	WdlV1_1ParserOR                    = 54
	WdlV1_1ParserOPTIONAL              = 55
	WdlV1_1ParserSTAR                  = 56
	WdlV1_1ParserPLUS                  = 57
	WdlV1_1ParserMINUS                 = 58
	WdlV1_1ParserDOLLAR                = 59
	WdlV1_1ParserCOMMA                 = 60
	WdlV1_1ParserSEMI                  = 61
	WdlV1_1ParserDOT                   = 62
	WdlV1_1ParserNOT                   = 63
	WdlV1_1ParserTILDE                 = 64
	WdlV1_1ParserDIVIDE                = 65
	WdlV1_1ParserMOD                   = 66
	WdlV1_1ParserSQUOTE                = 67
	WdlV1_1ParserDQUOTE                = 68
	WdlV1_1ParserWHITESPACE            = 69
	WdlV1_1ParserIdentifier            = 70
	WdlV1_1ParserStringPart            = 71
	WdlV1_1ParserBeginWhitespace       = 72
	WdlV1_1ParserBeginHereDoc          = 73
	WdlV1_1ParserBeginLBrace           = 74
	WdlV1_1ParserHereDocUnicodeEscape  = 75
	WdlV1_1ParserCommandUnicodeEscape  = 76
	WdlV1_1ParserStringCommandStart    = 77
	WdlV1_1ParserEndCommand            = 78
	WdlV1_1ParserCommandStringPart     = 79
	WdlV1_1ParserVersionWhitespace     = 80
	WdlV1_1ParserReleaseVersion        = 81
	WdlV1_1ParserBeginMeta             = 82
	WdlV1_1ParserMetaWhitespace        = 83
	WdlV1_1ParserMetaBodyComment       = 84
	WdlV1_1ParserMetaIdentifier        = 85
	WdlV1_1ParserMetaColon             = 86
	WdlV1_1ParserEndMeta               = 87
	WdlV1_1ParserMetaBodyWhitespace    = 88
	WdlV1_1ParserMetaValueComment      = 89
	WdlV1_1ParserMetaBool              = 90
	WdlV1_1ParserMetaInt               = 91
	WdlV1_1ParserMetaFloat             = 92
	WdlV1_1ParserMetaNull              = 93
	WdlV1_1ParserMetaSquote            = 94
	WdlV1_1ParserMetaDquote            = 95
	WdlV1_1ParserMetaEmptyObject       = 96
	WdlV1_1ParserMetaEmptyArray        = 97
	WdlV1_1ParserMetaLbrack            = 98
	WdlV1_1ParserMetaLbrace            = 99
	WdlV1_1ParserMetaValueWhitespace   = 100
	WdlV1_1ParserMetaStringPart        = 101
	WdlV1_1ParserMetaArrayComment      = 102
	WdlV1_1ParserMetaArrayCommaRbrack  = 103
	WdlV1_1ParserMetaArrayComma        = 104
	WdlV1_1ParserMetaRbrack            = 105
	WdlV1_1ParserMetaArrayWhitespace   = 106
	WdlV1_1ParserMetaObjectIdentifier  = 107
	WdlV1_1ParserMetaObjectColon       = 108
	WdlV1_1ParserMetaObjectCommaRbrace = 109
	WdlV1_1ParserMetaObjectComma       = 110
	WdlV1_1ParserMetaRbrace            = 111
	WdlV1_1ParserMetaObjectWhitespace  = 112
	WdlV1_1ParserHereDocEscapedEnd     = 113
)

// WdlV1_1Parser rules.
const (
	WdlV1_1ParserRULE_map_type                      = 0
	WdlV1_1ParserRULE_array_type                    = 1
	WdlV1_1ParserRULE_pair_type                     = 2
	WdlV1_1ParserRULE_type_base                     = 3
	WdlV1_1ParserRULE_wdl_type                      = 4
	WdlV1_1ParserRULE_unbound_decls                 = 5
	WdlV1_1ParserRULE_bound_decls                   = 6
	WdlV1_1ParserRULE_any_decls                     = 7
	WdlV1_1ParserRULE_number                        = 8
	WdlV1_1ParserRULE_expression_placeholder_option = 9
	WdlV1_1ParserRULE_string_part                   = 10
	WdlV1_1ParserRULE_string_expr_part              = 11
	WdlV1_1ParserRULE_string_expr_with_string_part  = 12
	WdlV1_1ParserRULE_string                        = 13
	WdlV1_1ParserRULE_primitive_literal             = 14
	WdlV1_1ParserRULE_expr                          = 15
	WdlV1_1ParserRULE_expr_infix                    = 16
	WdlV1_1ParserRULE_expr_infix0                   = 17
	WdlV1_1ParserRULE_expr_infix1                   = 18
	WdlV1_1ParserRULE_expr_infix2                   = 19
	WdlV1_1ParserRULE_expr_infix3                   = 20
	WdlV1_1ParserRULE_expr_infix4                   = 21
	WdlV1_1ParserRULE_expr_infix5                   = 22
	WdlV1_1ParserRULE_member                        = 23
	WdlV1_1ParserRULE_expr_core                     = 24
	WdlV1_1ParserRULE_version                       = 25
	WdlV1_1ParserRULE_import_alias                  = 26
	WdlV1_1ParserRULE_import_as                     = 27
	WdlV1_1ParserRULE_import_doc                    = 28
	WdlV1_1ParserRULE_struct                        = 29
	WdlV1_1ParserRULE_meta_value                    = 30
	WdlV1_1ParserRULE_meta_string_part              = 31
	WdlV1_1ParserRULE_meta_string                   = 32
	WdlV1_1ParserRULE_meta_array                    = 33
	WdlV1_1ParserRULE_meta_object                   = 34
	WdlV1_1ParserRULE_meta_object_kv                = 35
	WdlV1_1ParserRULE_meta_kv                       = 36
	WdlV1_1ParserRULE_parameter_meta                = 37
	WdlV1_1ParserRULE_meta                          = 38
	WdlV1_1ParserRULE_task_runtime_kv               = 39
	WdlV1_1ParserRULE_task_runtime                  = 40
	WdlV1_1ParserRULE_task_input                    = 41
	WdlV1_1ParserRULE_task_output                   = 42
	WdlV1_1ParserRULE_task_command_string_part      = 43
	WdlV1_1ParserRULE_task_command_expr_part        = 44
	WdlV1_1ParserRULE_task_command_expr_with_string = 45
	WdlV1_1ParserRULE_task_command                  = 46
	WdlV1_1ParserRULE_task_element                  = 47
	WdlV1_1ParserRULE_task                          = 48
	WdlV1_1ParserRULE_inner_workflow_element        = 49
	WdlV1_1ParserRULE_call_alias                    = 50
	WdlV1_1ParserRULE_call_input                    = 51
	WdlV1_1ParserRULE_call_inputs                   = 52
	WdlV1_1ParserRULE_call_body                     = 53
	WdlV1_1ParserRULE_call_after                    = 54
	WdlV1_1ParserRULE_call_name                     = 55
	WdlV1_1ParserRULE_call                          = 56
	WdlV1_1ParserRULE_scatter                       = 57
	WdlV1_1ParserRULE_conditional                   = 58
	WdlV1_1ParserRULE_workflow_input                = 59
	WdlV1_1ParserRULE_workflow_output               = 60
	WdlV1_1ParserRULE_workflow_element              = 61
	WdlV1_1ParserRULE_workflow                      = 62
	WdlV1_1ParserRULE_document_element              = 63
	WdlV1_1ParserRULE_document                      = 64
)

// IMap_typeContext is an interface to support dynamic dispatch.
type IMap_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMap_typeContext differentiates from other interfaces.
	IsMap_typeContext()
}

type Map_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMap_typeContext() *Map_typeContext {
	var p = new(Map_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_map_type
	return p
}

func (*Map_typeContext) IsMap_typeContext() {}

func NewMap_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Map_typeContext {
	var p = new(Map_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_map_type

	return p
}

func (s *Map_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Map_typeContext) MAP() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMAP, 0)
}

func (s *Map_typeContext) LBRACK() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACK, 0)
}

func (s *Map_typeContext) AllWdl_type() []IWdl_typeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWdl_typeContext); ok {
			len++
		}
	}

	tst := make([]IWdl_typeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWdl_typeContext); ok {
			tst[i] = t.(IWdl_typeContext)
			i++
		}
	}

	return tst
}

func (s *Map_typeContext) Wdl_type(i int) IWdl_typeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWdl_typeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWdl_typeContext)
}

func (s *Map_typeContext) COMMA() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCOMMA, 0)
}

func (s *Map_typeContext) RBRACK() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACK, 0)
}

func (s *Map_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Map_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Map_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitMap_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Map_type() (localctx IMap_typeContext) {
	this := p
	_ = this

	localctx = NewMap_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, WdlV1_1ParserRULE_map_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(130)
		p.Match(WdlV1_1ParserMAP)
	}
	{
		p.SetState(131)
		p.Match(WdlV1_1ParserLBRACK)
	}
	{
		p.SetState(132)
		p.Wdl_type()
	}
	{
		p.SetState(133)
		p.Match(WdlV1_1ParserCOMMA)
	}
	{
		p.SetState(134)
		p.Wdl_type()
	}
	{
		p.SetState(135)
		p.Match(WdlV1_1ParserRBRACK)
	}

	return localctx
}

// IArray_typeContext is an interface to support dynamic dispatch.
type IArray_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArray_typeContext differentiates from other interfaces.
	IsArray_typeContext()
}

type Array_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_typeContext() *Array_typeContext {
	var p = new(Array_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_array_type
	return p
}

func (*Array_typeContext) IsArray_typeContext() {}

func NewArray_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_typeContext {
	var p = new(Array_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_array_type

	return p
}

func (s *Array_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_typeContext) ARRAY() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserARRAY, 0)
}

func (s *Array_typeContext) LBRACK() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACK, 0)
}

func (s *Array_typeContext) Wdl_type() IWdl_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWdl_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWdl_typeContext)
}

func (s *Array_typeContext) RBRACK() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACK, 0)
}

func (s *Array_typeContext) PLUS() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserPLUS, 0)
}

func (s *Array_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitArray_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Array_type() (localctx IArray_typeContext) {
	this := p
	_ = this

	localctx = NewArray_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, WdlV1_1ParserRULE_array_type)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(137)
		p.Match(WdlV1_1ParserARRAY)
	}
	{
		p.SetState(138)
		p.Match(WdlV1_1ParserLBRACK)
	}
	{
		p.SetState(139)
		p.Wdl_type()
	}
	{
		p.SetState(140)
		p.Match(WdlV1_1ParserRBRACK)
	}
	p.SetState(142)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == WdlV1_1ParserPLUS {
		{
			p.SetState(141)
			p.Match(WdlV1_1ParserPLUS)
		}

	}

	return localctx
}

// IPair_typeContext is an interface to support dynamic dispatch.
type IPair_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPair_typeContext differentiates from other interfaces.
	IsPair_typeContext()
}

type Pair_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPair_typeContext() *Pair_typeContext {
	var p = new(Pair_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_pair_type
	return p
}

func (*Pair_typeContext) IsPair_typeContext() {}

func NewPair_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pair_typeContext {
	var p = new(Pair_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_pair_type

	return p
}

func (s *Pair_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Pair_typeContext) PAIR() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserPAIR, 0)
}

func (s *Pair_typeContext) LBRACK() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACK, 0)
}

func (s *Pair_typeContext) AllWdl_type() []IWdl_typeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWdl_typeContext); ok {
			len++
		}
	}

	tst := make([]IWdl_typeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWdl_typeContext); ok {
			tst[i] = t.(IWdl_typeContext)
			i++
		}
	}

	return tst
}

func (s *Pair_typeContext) Wdl_type(i int) IWdl_typeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWdl_typeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWdl_typeContext)
}

func (s *Pair_typeContext) COMMA() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCOMMA, 0)
}

func (s *Pair_typeContext) RBRACK() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACK, 0)
}

func (s *Pair_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pair_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pair_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitPair_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Pair_type() (localctx IPair_typeContext) {
	this := p
	_ = this

	localctx = NewPair_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, WdlV1_1ParserRULE_pair_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(144)
		p.Match(WdlV1_1ParserPAIR)
	}
	{
		p.SetState(145)
		p.Match(WdlV1_1ParserLBRACK)
	}
	{
		p.SetState(146)
		p.Wdl_type()
	}
	{
		p.SetState(147)
		p.Match(WdlV1_1ParserCOMMA)
	}
	{
		p.SetState(148)
		p.Wdl_type()
	}
	{
		p.SetState(149)
		p.Match(WdlV1_1ParserRBRACK)
	}

	return localctx
}

// IType_baseContext is an interface to support dynamic dispatch.
type IType_baseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_baseContext differentiates from other interfaces.
	IsType_baseContext()
}

type Type_baseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_baseContext() *Type_baseContext {
	var p = new(Type_baseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_type_base
	return p
}

func (*Type_baseContext) IsType_baseContext() {}

func NewType_baseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_baseContext {
	var p = new(Type_baseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_type_base

	return p
}

func (s *Type_baseContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_baseContext) Array_type() IArray_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArray_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArray_typeContext)
}

func (s *Type_baseContext) Map_type() IMap_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMap_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMap_typeContext)
}

func (s *Type_baseContext) Pair_type() IPair_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPair_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPair_typeContext)
}

func (s *Type_baseContext) STRING() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserSTRING, 0)
}

func (s *Type_baseContext) FILE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserFILE, 0)
}

func (s *Type_baseContext) BOOLEAN() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserBOOLEAN, 0)
}

func (s *Type_baseContext) INT() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserINT, 0)
}

func (s *Type_baseContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserFLOAT, 0)
}

func (s *Type_baseContext) OBJECT() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserOBJECT, 0)
}

func (s *Type_baseContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *Type_baseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_baseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_baseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitType_base(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Type_base() (localctx IType_baseContext) {
	this := p
	_ = this

	localctx = NewType_baseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, WdlV1_1ParserRULE_type_base)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(155)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case WdlV1_1ParserARRAY:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(151)
			p.Array_type()
		}

	case WdlV1_1ParserMAP:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(152)
			p.Map_type()
		}

	case WdlV1_1ParserPAIR:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(153)
			p.Pair_type()
		}

	case WdlV1_1ParserBOOLEAN, WdlV1_1ParserINT, WdlV1_1ParserFLOAT, WdlV1_1ParserSTRING, WdlV1_1ParserFILE, WdlV1_1ParserOBJECT, WdlV1_1ParserIdentifier:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(154)
			_la = p.GetTokenStream().LA(1)

			if !((int64((_la-20)) & ^0x3f) == 0 && ((int64(1)<<(_la-20))&1125899906842783) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IWdl_typeContext is an interface to support dynamic dispatch.
type IWdl_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWdl_typeContext differentiates from other interfaces.
	IsWdl_typeContext()
}

type Wdl_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWdl_typeContext() *Wdl_typeContext {
	var p = new(Wdl_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_wdl_type
	return p
}

func (*Wdl_typeContext) IsWdl_typeContext() {}

func NewWdl_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Wdl_typeContext {
	var p = new(Wdl_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_wdl_type

	return p
}

func (s *Wdl_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Wdl_typeContext) Type_base() IType_baseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_baseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_baseContext)
}

func (s *Wdl_typeContext) OPTIONAL() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserOPTIONAL, 0)
}

func (s *Wdl_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Wdl_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Wdl_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitWdl_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Wdl_type() (localctx IWdl_typeContext) {
	this := p
	_ = this

	localctx = NewWdl_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, WdlV1_1ParserRULE_wdl_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(161)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(157)
			p.Type_base()
		}
		{
			p.SetState(158)
			p.Match(WdlV1_1ParserOPTIONAL)
		}

	case 2:
		{
			p.SetState(160)
			p.Type_base()
		}

	}

	return localctx
}

// IUnbound_declsContext is an interface to support dynamic dispatch.
type IUnbound_declsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnbound_declsContext differentiates from other interfaces.
	IsUnbound_declsContext()
}

type Unbound_declsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnbound_declsContext() *Unbound_declsContext {
	var p = new(Unbound_declsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_unbound_decls
	return p
}

func (*Unbound_declsContext) IsUnbound_declsContext() {}

func NewUnbound_declsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unbound_declsContext {
	var p = new(Unbound_declsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_unbound_decls

	return p
}

func (s *Unbound_declsContext) GetParser() antlr.Parser { return s.parser }

func (s *Unbound_declsContext) Wdl_type() IWdl_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWdl_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWdl_typeContext)
}

func (s *Unbound_declsContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *Unbound_declsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unbound_declsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unbound_declsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitUnbound_decls(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Unbound_decls() (localctx IUnbound_declsContext) {
	this := p
	_ = this

	localctx = NewUnbound_declsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, WdlV1_1ParserRULE_unbound_decls)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(163)
		p.Wdl_type()
	}
	{
		p.SetState(164)
		p.Match(WdlV1_1ParserIdentifier)
	}

	return localctx
}

// IBound_declsContext is an interface to support dynamic dispatch.
type IBound_declsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBound_declsContext differentiates from other interfaces.
	IsBound_declsContext()
}

type Bound_declsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBound_declsContext() *Bound_declsContext {
	var p = new(Bound_declsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_bound_decls
	return p
}

func (*Bound_declsContext) IsBound_declsContext() {}

func NewBound_declsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bound_declsContext {
	var p = new(Bound_declsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_bound_decls

	return p
}

func (s *Bound_declsContext) GetParser() antlr.Parser { return s.parser }

func (s *Bound_declsContext) Wdl_type() IWdl_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWdl_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWdl_typeContext)
}

func (s *Bound_declsContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *Bound_declsContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserEQUAL, 0)
}

func (s *Bound_declsContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Bound_declsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bound_declsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bound_declsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitBound_decls(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Bound_decls() (localctx IBound_declsContext) {
	this := p
	_ = this

	localctx = NewBound_declsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, WdlV1_1ParserRULE_bound_decls)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(166)
		p.Wdl_type()
	}
	{
		p.SetState(167)
		p.Match(WdlV1_1ParserIdentifier)
	}
	{
		p.SetState(168)
		p.Match(WdlV1_1ParserEQUAL)
	}
	{
		p.SetState(169)
		p.Expr()
	}

	return localctx
}

// IAny_declsContext is an interface to support dynamic dispatch.
type IAny_declsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAny_declsContext differentiates from other interfaces.
	IsAny_declsContext()
}

type Any_declsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAny_declsContext() *Any_declsContext {
	var p = new(Any_declsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_any_decls
	return p
}

func (*Any_declsContext) IsAny_declsContext() {}

func NewAny_declsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Any_declsContext {
	var p = new(Any_declsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_any_decls

	return p
}

func (s *Any_declsContext) GetParser() antlr.Parser { return s.parser }

func (s *Any_declsContext) Unbound_decls() IUnbound_declsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnbound_declsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnbound_declsContext)
}

func (s *Any_declsContext) Bound_decls() IBound_declsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBound_declsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBound_declsContext)
}

func (s *Any_declsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Any_declsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Any_declsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitAny_decls(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Any_decls() (localctx IAny_declsContext) {
	this := p
	_ = this

	localctx = NewAny_declsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, WdlV1_1ParserRULE_any_decls)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(173)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(171)
			p.Unbound_decls()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(172)
			p.Bound_decls()
		}

	}

	return localctx
}

// INumberContext is an interface to support dynamic dispatch.
type INumberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNumberContext differentiates from other interfaces.
	IsNumberContext()
}

type NumberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumberContext() *NumberContext {
	var p = new(NumberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_number
	return p
}

func (*NumberContext) IsNumberContext() {}

func NewNumberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumberContext {
	var p = new(NumberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_number

	return p
}

func (s *NumberContext) GetParser() antlr.Parser { return s.parser }

func (s *NumberContext) IntLiteral() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIntLiteral, 0)
}

func (s *NumberContext) FloatLiteral() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserFloatLiteral, 0)
}

func (s *NumberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitNumber(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Number() (localctx INumberContext) {
	this := p
	_ = this

	localctx = NewNumberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, WdlV1_1ParserRULE_number)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(175)
		_la = p.GetTokenStream().LA(1)

		if !(_la == WdlV1_1ParserIntLiteral || _la == WdlV1_1ParserFloatLiteral) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IExpression_placeholder_optionContext is an interface to support dynamic dispatch.
type IExpression_placeholder_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpression_placeholder_optionContext differentiates from other interfaces.
	IsExpression_placeholder_optionContext()
}

type Expression_placeholder_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_placeholder_optionContext() *Expression_placeholder_optionContext {
	var p = new(Expression_placeholder_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_expression_placeholder_option
	return p
}

func (*Expression_placeholder_optionContext) IsExpression_placeholder_optionContext() {}

func NewExpression_placeholder_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_placeholder_optionContext {
	var p = new(Expression_placeholder_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_expression_placeholder_option

	return p
}

func (s *Expression_placeholder_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_placeholder_optionContext) BoolLiteral() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserBoolLiteral, 0)
}

func (s *Expression_placeholder_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserEQUAL, 0)
}

func (s *Expression_placeholder_optionContext) String_() IStringContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Expression_placeholder_optionContext) DEFAULTEQUAL() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserDEFAULTEQUAL, 0)
}

func (s *Expression_placeholder_optionContext) Number() INumberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *Expression_placeholder_optionContext) SEPEQUAL() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserSEPEQUAL, 0)
}

func (s *Expression_placeholder_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_placeholder_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_placeholder_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitExpression_placeholder_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Expression_placeholder_option() (localctx IExpression_placeholder_optionContext) {
	this := p
	_ = this

	localctx = NewExpression_placeholder_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, WdlV1_1ParserRULE_expression_placeholder_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(187)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case WdlV1_1ParserBoolLiteral:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(177)
			p.Match(WdlV1_1ParserBoolLiteral)
		}
		{
			p.SetState(178)
			p.Match(WdlV1_1ParserEQUAL)
		}
		{
			p.SetState(179)
			p.String_()
		}

	case WdlV1_1ParserDEFAULTEQUAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(180)
			p.Match(WdlV1_1ParserDEFAULTEQUAL)
		}
		p.SetState(183)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case WdlV1_1ParserSQUOTE, WdlV1_1ParserDQUOTE:
			{
				p.SetState(181)
				p.String_()
			}

		case WdlV1_1ParserIntLiteral, WdlV1_1ParserFloatLiteral:
			{
				p.SetState(182)
				p.Number()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case WdlV1_1ParserSEPEQUAL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(185)
			p.Match(WdlV1_1ParserSEPEQUAL)
		}
		{
			p.SetState(186)
			p.String_()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IString_partContext is an interface to support dynamic dispatch.
type IString_partContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsString_partContext differentiates from other interfaces.
	IsString_partContext()
}

type String_partContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyString_partContext() *String_partContext {
	var p = new(String_partContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_string_part
	return p
}

func (*String_partContext) IsString_partContext() {}

func NewString_partContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *String_partContext {
	var p = new(String_partContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_string_part

	return p
}

func (s *String_partContext) GetParser() antlr.Parser { return s.parser }

func (s *String_partContext) AllStringPart() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserStringPart)
}

func (s *String_partContext) StringPart(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserStringPart, i)
}

func (s *String_partContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *String_partContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *String_partContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitString_part(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) String_part() (localctx IString_partContext) {
	this := p
	_ = this

	localctx = NewString_partContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, WdlV1_1ParserRULE_string_part)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(192)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == WdlV1_1ParserStringPart {
		{
			p.SetState(189)
			p.Match(WdlV1_1ParserStringPart)
		}

		p.SetState(194)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IString_expr_partContext is an interface to support dynamic dispatch.
type IString_expr_partContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsString_expr_partContext differentiates from other interfaces.
	IsString_expr_partContext()
}

type String_expr_partContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyString_expr_partContext() *String_expr_partContext {
	var p = new(String_expr_partContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_string_expr_part
	return p
}

func (*String_expr_partContext) IsString_expr_partContext() {}

func NewString_expr_partContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *String_expr_partContext {
	var p = new(String_expr_partContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_string_expr_part

	return p
}

func (s *String_expr_partContext) GetParser() antlr.Parser { return s.parser }

func (s *String_expr_partContext) StringCommandStart() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserStringCommandStart, 0)
}

func (s *String_expr_partContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *String_expr_partContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *String_expr_partContext) AllExpression_placeholder_option() []IExpression_placeholder_optionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpression_placeholder_optionContext); ok {
			len++
		}
	}

	tst := make([]IExpression_placeholder_optionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpression_placeholder_optionContext); ok {
			tst[i] = t.(IExpression_placeholder_optionContext)
			i++
		}
	}

	return tst
}

func (s *String_expr_partContext) Expression_placeholder_option(i int) IExpression_placeholder_optionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_placeholder_optionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_placeholder_optionContext)
}

func (s *String_expr_partContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *String_expr_partContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *String_expr_partContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitString_expr_part(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) String_expr_part() (localctx IString_expr_partContext) {
	this := p
	_ = this

	localctx = NewString_expr_partContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, WdlV1_1ParserRULE_string_expr_part)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(195)
		p.Match(WdlV1_1ParserStringCommandStart)
	}
	p.SetState(199)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(196)
				p.Expression_placeholder_option()
			}

		}
		p.SetState(201)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext())
	}
	{
		p.SetState(202)
		p.Expr()
	}
	{
		p.SetState(203)
		p.Match(WdlV1_1ParserRBRACE)
	}

	return localctx
}

// IString_expr_with_string_partContext is an interface to support dynamic dispatch.
type IString_expr_with_string_partContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsString_expr_with_string_partContext differentiates from other interfaces.
	IsString_expr_with_string_partContext()
}

type String_expr_with_string_partContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyString_expr_with_string_partContext() *String_expr_with_string_partContext {
	var p = new(String_expr_with_string_partContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_string_expr_with_string_part
	return p
}

func (*String_expr_with_string_partContext) IsString_expr_with_string_partContext() {}

func NewString_expr_with_string_partContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *String_expr_with_string_partContext {
	var p = new(String_expr_with_string_partContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_string_expr_with_string_part

	return p
}

func (s *String_expr_with_string_partContext) GetParser() antlr.Parser { return s.parser }

func (s *String_expr_with_string_partContext) String_expr_part() IString_expr_partContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_expr_partContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_expr_partContext)
}

func (s *String_expr_with_string_partContext) String_part() IString_partContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_partContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_partContext)
}

func (s *String_expr_with_string_partContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *String_expr_with_string_partContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *String_expr_with_string_partContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitString_expr_with_string_part(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) String_expr_with_string_part() (localctx IString_expr_with_string_partContext) {
	this := p
	_ = this

	localctx = NewString_expr_with_string_partContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, WdlV1_1ParserRULE_string_expr_with_string_part)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(205)
		p.String_expr_part()
	}
	{
		p.SetState(206)
		p.String_part()
	}

	return localctx
}

// IStringContext is an interface to support dynamic dispatch.
type IStringContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringContext differentiates from other interfaces.
	IsStringContext()
}

type StringContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringContext() *StringContext {
	var p = new(StringContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_string
	return p
}

func (*StringContext) IsStringContext() {}

func NewStringContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringContext {
	var p = new(StringContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_string

	return p
}

func (s *StringContext) GetParser() antlr.Parser { return s.parser }

func (s *StringContext) AllDQUOTE() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserDQUOTE)
}

func (s *StringContext) DQUOTE(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserDQUOTE, i)
}

func (s *StringContext) String_part() IString_partContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_partContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_partContext)
}

func (s *StringContext) AllString_expr_with_string_part() []IString_expr_with_string_partContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IString_expr_with_string_partContext); ok {
			len++
		}
	}

	tst := make([]IString_expr_with_string_partContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IString_expr_with_string_partContext); ok {
			tst[i] = t.(IString_expr_with_string_partContext)
			i++
		}
	}

	return tst
}

func (s *StringContext) String_expr_with_string_part(i int) IString_expr_with_string_partContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_expr_with_string_partContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_expr_with_string_partContext)
}

func (s *StringContext) AllSQUOTE() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserSQUOTE)
}

func (s *StringContext) SQUOTE(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserSQUOTE, i)
}

func (s *StringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitString(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) String_() (localctx IStringContext) {
	this := p
	_ = this

	localctx = NewStringContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, WdlV1_1ParserRULE_string)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(228)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case WdlV1_1ParserDQUOTE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(208)
			p.Match(WdlV1_1ParserDQUOTE)
		}
		{
			p.SetState(209)
			p.String_part()
		}
		p.SetState(213)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == WdlV1_1ParserStringCommandStart {
			{
				p.SetState(210)
				p.String_expr_with_string_part()
			}

			p.SetState(215)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(216)
			p.Match(WdlV1_1ParserDQUOTE)
		}

	case WdlV1_1ParserSQUOTE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(218)
			p.Match(WdlV1_1ParserSQUOTE)
		}
		{
			p.SetState(219)
			p.String_part()
		}
		p.SetState(223)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == WdlV1_1ParserStringCommandStart {
			{
				p.SetState(220)
				p.String_expr_with_string_part()
			}

			p.SetState(225)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(226)
			p.Match(WdlV1_1ParserSQUOTE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPrimitive_literalContext is an interface to support dynamic dispatch.
type IPrimitive_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimitive_literalContext differentiates from other interfaces.
	IsPrimitive_literalContext()
}

type Primitive_literalContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimitive_literalContext() *Primitive_literalContext {
	var p = new(Primitive_literalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_primitive_literal
	return p
}

func (*Primitive_literalContext) IsPrimitive_literalContext() {}

func NewPrimitive_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Primitive_literalContext {
	var p = new(Primitive_literalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_primitive_literal

	return p
}

func (s *Primitive_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Primitive_literalContext) BoolLiteral() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserBoolLiteral, 0)
}

func (s *Primitive_literalContext) Number() INumberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *Primitive_literalContext) String_() IStringContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Primitive_literalContext) NONELITERAL() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserNONELITERAL, 0)
}

func (s *Primitive_literalContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *Primitive_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Primitive_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Primitive_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitPrimitive_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Primitive_literal() (localctx IPrimitive_literalContext) {
	this := p
	_ = this

	localctx = NewPrimitive_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, WdlV1_1ParserRULE_primitive_literal)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(235)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case WdlV1_1ParserBoolLiteral:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(230)
			p.Match(WdlV1_1ParserBoolLiteral)
		}

	case WdlV1_1ParserIntLiteral, WdlV1_1ParserFloatLiteral:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(231)
			p.Number()
		}

	case WdlV1_1ParserSQUOTE, WdlV1_1ParserDQUOTE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(232)
			p.String_()
		}

	case WdlV1_1ParserNONELITERAL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(233)
			p.Match(WdlV1_1ParserNONELITERAL)
		}

	case WdlV1_1ParserIdentifier:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(234)
			p.Match(WdlV1_1ParserIdentifier)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExprContext is an interface to support dynamic dispatch.
type IExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExprContext differentiates from other interfaces.
	IsExprContext()
}

type ExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprContext() *ExprContext {
	var p = new(ExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_expr
	return p
}

func (*ExprContext) IsExprContext() {}

func NewExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprContext {
	var p = new(ExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_expr

	return p
}

func (s *ExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprContext) Expr_infix() IExpr_infixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infixContext)
}

func (s *ExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Expr() (localctx IExprContext) {
	this := p
	_ = this

	localctx = NewExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, WdlV1_1ParserRULE_expr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(237)
		p.Expr_infix()
	}

	return localctx
}

// IExpr_infixContext is an interface to support dynamic dispatch.
type IExpr_infixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpr_infixContext differentiates from other interfaces.
	IsExpr_infixContext()
}

type Expr_infixContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpr_infixContext() *Expr_infixContext {
	var p = new(Expr_infixContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_expr_infix
	return p
}

func (*Expr_infixContext) IsExpr_infixContext() {}

func NewExpr_infixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expr_infixContext {
	var p = new(Expr_infixContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_expr_infix

	return p
}

func (s *Expr_infixContext) GetParser() antlr.Parser { return s.parser }

func (s *Expr_infixContext) CopyFrom(ctx *Expr_infixContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Expr_infixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_infixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Infix0Context struct {
	*Expr_infixContext
}

func NewInfix0Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *Infix0Context {
	var p = new(Infix0Context)

	p.Expr_infixContext = NewEmptyExpr_infixContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infixContext))

	return p
}

func (s *Infix0Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Infix0Context) Expr_infix0() IExpr_infix0Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix0Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix0Context)
}

func (s *Infix0Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitInfix0(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Expr_infix() (localctx IExpr_infixContext) {
	this := p
	_ = this

	localctx = NewExpr_infixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, WdlV1_1ParserRULE_expr_infix)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	localctx = NewInfix0Context(p, localctx)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(239)
		p.expr_infix0(0)
	}

	return localctx
}

// IExpr_infix0Context is an interface to support dynamic dispatch.
type IExpr_infix0Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpr_infix0Context differentiates from other interfaces.
	IsExpr_infix0Context()
}

type Expr_infix0Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpr_infix0Context() *Expr_infix0Context {
	var p = new(Expr_infix0Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_expr_infix0
	return p
}

func (*Expr_infix0Context) IsExpr_infix0Context() {}

func NewExpr_infix0Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expr_infix0Context {
	var p = new(Expr_infix0Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_expr_infix0

	return p
}

func (s *Expr_infix0Context) GetParser() antlr.Parser { return s.parser }

func (s *Expr_infix0Context) CopyFrom(ctx *Expr_infix0Context) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Expr_infix0Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_infix0Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Infix1Context struct {
	*Expr_infix0Context
}

func NewInfix1Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *Infix1Context {
	var p = new(Infix1Context)

	p.Expr_infix0Context = NewEmptyExpr_infix0Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix0Context))

	return p
}

func (s *Infix1Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Infix1Context) Expr_infix1() IExpr_infix1Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix1Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix1Context)
}

func (s *Infix1Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitInfix1(s)

	default:
		return t.VisitChildren(s)
	}
}

type LorContext struct {
	*Expr_infix0Context
}

func NewLorContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LorContext {
	var p = new(LorContext)

	p.Expr_infix0Context = NewEmptyExpr_infix0Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix0Context))

	return p
}

func (s *LorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LorContext) Expr_infix0() IExpr_infix0Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix0Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix0Context)
}

func (s *LorContext) OR() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserOR, 0)
}

func (s *LorContext) Expr_infix1() IExpr_infix1Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix1Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix1Context)
}

func (s *LorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitLor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Expr_infix0() (localctx IExpr_infix0Context) {
	return p.expr_infix0(0)
}

func (p *WdlV1_1Parser) expr_infix0(_p int) (localctx IExpr_infix0Context) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpr_infix0Context(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpr_infix0Context = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 34
	p.EnterRecursionRule(localctx, 34, WdlV1_1ParserRULE_expr_infix0, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	localctx = NewInfix1Context(p, localctx)
	p.SetParserRuleContext(localctx)
	_prevctx = localctx

	{
		p.SetState(242)
		p.expr_infix1(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(249)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewLorContext(p, NewExpr_infix0Context(p, _parentctx, _parentState))
			p.PushNewRecursionContext(localctx, _startState, WdlV1_1ParserRULE_expr_infix0)
			p.SetState(244)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(245)
				p.Match(WdlV1_1ParserOR)
			}
			{
				p.SetState(246)
				p.expr_infix1(0)
			}

		}
		p.SetState(251)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext())
	}

	return localctx
}

// IExpr_infix1Context is an interface to support dynamic dispatch.
type IExpr_infix1Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpr_infix1Context differentiates from other interfaces.
	IsExpr_infix1Context()
}

type Expr_infix1Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpr_infix1Context() *Expr_infix1Context {
	var p = new(Expr_infix1Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_expr_infix1
	return p
}

func (*Expr_infix1Context) IsExpr_infix1Context() {}

func NewExpr_infix1Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expr_infix1Context {
	var p = new(Expr_infix1Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_expr_infix1

	return p
}

func (s *Expr_infix1Context) GetParser() antlr.Parser { return s.parser }

func (s *Expr_infix1Context) CopyFrom(ctx *Expr_infix1Context) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Expr_infix1Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_infix1Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Infix2Context struct {
	*Expr_infix1Context
}

func NewInfix2Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *Infix2Context {
	var p = new(Infix2Context)

	p.Expr_infix1Context = NewEmptyExpr_infix1Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix1Context))

	return p
}

func (s *Infix2Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Infix2Context) Expr_infix2() IExpr_infix2Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix2Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix2Context)
}

func (s *Infix2Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitInfix2(s)

	default:
		return t.VisitChildren(s)
	}
}

type LandContext struct {
	*Expr_infix1Context
}

func NewLandContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LandContext {
	var p = new(LandContext)

	p.Expr_infix1Context = NewEmptyExpr_infix1Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix1Context))

	return p
}

func (s *LandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LandContext) Expr_infix1() IExpr_infix1Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix1Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix1Context)
}

func (s *LandContext) AND() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserAND, 0)
}

func (s *LandContext) Expr_infix2() IExpr_infix2Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix2Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix2Context)
}

func (s *LandContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitLand(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Expr_infix1() (localctx IExpr_infix1Context) {
	return p.expr_infix1(0)
}

func (p *WdlV1_1Parser) expr_infix1(_p int) (localctx IExpr_infix1Context) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpr_infix1Context(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpr_infix1Context = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 36
	p.EnterRecursionRule(localctx, 36, WdlV1_1ParserRULE_expr_infix1, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	localctx = NewInfix2Context(p, localctx)
	p.SetParserRuleContext(localctx)
	_prevctx = localctx

	{
		p.SetState(253)
		p.expr_infix2(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(260)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewLandContext(p, NewExpr_infix1Context(p, _parentctx, _parentState))
			p.PushNewRecursionContext(localctx, _startState, WdlV1_1ParserRULE_expr_infix1)
			p.SetState(255)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(256)
				p.Match(WdlV1_1ParserAND)
			}
			{
				p.SetState(257)
				p.expr_infix2(0)
			}

		}
		p.SetState(262)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext())
	}

	return localctx
}

// IExpr_infix2Context is an interface to support dynamic dispatch.
type IExpr_infix2Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpr_infix2Context differentiates from other interfaces.
	IsExpr_infix2Context()
}

type Expr_infix2Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpr_infix2Context() *Expr_infix2Context {
	var p = new(Expr_infix2Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_expr_infix2
	return p
}

func (*Expr_infix2Context) IsExpr_infix2Context() {}

func NewExpr_infix2Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expr_infix2Context {
	var p = new(Expr_infix2Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_expr_infix2

	return p
}

func (s *Expr_infix2Context) GetParser() antlr.Parser { return s.parser }

func (s *Expr_infix2Context) CopyFrom(ctx *Expr_infix2Context) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Expr_infix2Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_infix2Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type EqeqContext struct {
	*Expr_infix2Context
}

func NewEqeqContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *EqeqContext {
	var p = new(EqeqContext)

	p.Expr_infix2Context = NewEmptyExpr_infix2Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix2Context))

	return p
}

func (s *EqeqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EqeqContext) Expr_infix2() IExpr_infix2Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix2Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix2Context)
}

func (s *EqeqContext) EQUALITY() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserEQUALITY, 0)
}

func (s *EqeqContext) Expr_infix3() IExpr_infix3Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix3Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix3Context)
}

func (s *EqeqContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitEqeq(s)

	default:
		return t.VisitChildren(s)
	}
}

type LtContext struct {
	*Expr_infix2Context
}

func NewLtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LtContext {
	var p = new(LtContext)

	p.Expr_infix2Context = NewEmptyExpr_infix2Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix2Context))

	return p
}

func (s *LtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LtContext) Expr_infix2() IExpr_infix2Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix2Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix2Context)
}

func (s *LtContext) LT() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLT, 0)
}

func (s *LtContext) Expr_infix3() IExpr_infix3Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix3Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix3Context)
}

func (s *LtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitLt(s)

	default:
		return t.VisitChildren(s)
	}
}

type Infix3Context struct {
	*Expr_infix2Context
}

func NewInfix3Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *Infix3Context {
	var p = new(Infix3Context)

	p.Expr_infix2Context = NewEmptyExpr_infix2Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix2Context))

	return p
}

func (s *Infix3Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Infix3Context) Expr_infix3() IExpr_infix3Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix3Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix3Context)
}

func (s *Infix3Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitInfix3(s)

	default:
		return t.VisitChildren(s)
	}
}

type GteContext struct {
	*Expr_infix2Context
}

func NewGteContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GteContext {
	var p = new(GteContext)

	p.Expr_infix2Context = NewEmptyExpr_infix2Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix2Context))

	return p
}

func (s *GteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GteContext) Expr_infix2() IExpr_infix2Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix2Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix2Context)
}

func (s *GteContext) GTE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserGTE, 0)
}

func (s *GteContext) Expr_infix3() IExpr_infix3Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix3Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix3Context)
}

func (s *GteContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitGte(s)

	default:
		return t.VisitChildren(s)
	}
}

type NeqContext struct {
	*Expr_infix2Context
}

func NewNeqContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NeqContext {
	var p = new(NeqContext)

	p.Expr_infix2Context = NewEmptyExpr_infix2Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix2Context))

	return p
}

func (s *NeqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NeqContext) Expr_infix2() IExpr_infix2Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix2Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix2Context)
}

func (s *NeqContext) NOTEQUAL() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserNOTEQUAL, 0)
}

func (s *NeqContext) Expr_infix3() IExpr_infix3Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix3Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix3Context)
}

func (s *NeqContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitNeq(s)

	default:
		return t.VisitChildren(s)
	}
}

type LteContext struct {
	*Expr_infix2Context
}

func NewLteContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LteContext {
	var p = new(LteContext)

	p.Expr_infix2Context = NewEmptyExpr_infix2Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix2Context))

	return p
}

func (s *LteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LteContext) Expr_infix2() IExpr_infix2Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix2Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix2Context)
}

func (s *LteContext) LTE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLTE, 0)
}

func (s *LteContext) Expr_infix3() IExpr_infix3Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix3Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix3Context)
}

func (s *LteContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitLte(s)

	default:
		return t.VisitChildren(s)
	}
}

type GtContext struct {
	*Expr_infix2Context
}

func NewGtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GtContext {
	var p = new(GtContext)

	p.Expr_infix2Context = NewEmptyExpr_infix2Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix2Context))

	return p
}

func (s *GtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GtContext) Expr_infix2() IExpr_infix2Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix2Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix2Context)
}

func (s *GtContext) GT() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserGT, 0)
}

func (s *GtContext) Expr_infix3() IExpr_infix3Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix3Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix3Context)
}

func (s *GtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitGt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Expr_infix2() (localctx IExpr_infix2Context) {
	return p.expr_infix2(0)
}

func (p *WdlV1_1Parser) expr_infix2(_p int) (localctx IExpr_infix2Context) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpr_infix2Context(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpr_infix2Context = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 38
	p.EnterRecursionRule(localctx, 38, WdlV1_1ParserRULE_expr_infix2, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	localctx = NewInfix3Context(p, localctx)
	p.SetParserRuleContext(localctx)
	_prevctx = localctx

	{
		p.SetState(264)
		p.expr_infix3(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(286)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(284)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 14, p.GetParserRuleContext()) {
			case 1:
				localctx = NewEqeqContext(p, NewExpr_infix2Context(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, WdlV1_1ParserRULE_expr_infix2)
				p.SetState(266)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(267)
					p.Match(WdlV1_1ParserEQUALITY)
				}
				{
					p.SetState(268)
					p.expr_infix3(0)
				}

			case 2:
				localctx = NewNeqContext(p, NewExpr_infix2Context(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, WdlV1_1ParserRULE_expr_infix2)
				p.SetState(269)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(270)
					p.Match(WdlV1_1ParserNOTEQUAL)
				}
				{
					p.SetState(271)
					p.expr_infix3(0)
				}

			case 3:
				localctx = NewLteContext(p, NewExpr_infix2Context(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, WdlV1_1ParserRULE_expr_infix2)
				p.SetState(272)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(273)
					p.Match(WdlV1_1ParserLTE)
				}
				{
					p.SetState(274)
					p.expr_infix3(0)
				}

			case 4:
				localctx = NewGteContext(p, NewExpr_infix2Context(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, WdlV1_1ParserRULE_expr_infix2)
				p.SetState(275)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(276)
					p.Match(WdlV1_1ParserGTE)
				}
				{
					p.SetState(277)
					p.expr_infix3(0)
				}

			case 5:
				localctx = NewLtContext(p, NewExpr_infix2Context(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, WdlV1_1ParserRULE_expr_infix2)
				p.SetState(278)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(279)
					p.Match(WdlV1_1ParserLT)
				}
				{
					p.SetState(280)
					p.expr_infix3(0)
				}

			case 6:
				localctx = NewGtContext(p, NewExpr_infix2Context(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, WdlV1_1ParserRULE_expr_infix2)
				p.SetState(281)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(282)
					p.Match(WdlV1_1ParserGT)
				}
				{
					p.SetState(283)
					p.expr_infix3(0)
				}

			}

		}
		p.SetState(288)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext())
	}

	return localctx
}

// IExpr_infix3Context is an interface to support dynamic dispatch.
type IExpr_infix3Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpr_infix3Context differentiates from other interfaces.
	IsExpr_infix3Context()
}

type Expr_infix3Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpr_infix3Context() *Expr_infix3Context {
	var p = new(Expr_infix3Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_expr_infix3
	return p
}

func (*Expr_infix3Context) IsExpr_infix3Context() {}

func NewExpr_infix3Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expr_infix3Context {
	var p = new(Expr_infix3Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_expr_infix3

	return p
}

func (s *Expr_infix3Context) GetParser() antlr.Parser { return s.parser }

func (s *Expr_infix3Context) CopyFrom(ctx *Expr_infix3Context) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Expr_infix3Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_infix3Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type AddContext struct {
	*Expr_infix3Context
}

func NewAddContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AddContext {
	var p = new(AddContext)

	p.Expr_infix3Context = NewEmptyExpr_infix3Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix3Context))

	return p
}

func (s *AddContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AddContext) Expr_infix3() IExpr_infix3Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix3Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix3Context)
}

func (s *AddContext) PLUS() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserPLUS, 0)
}

func (s *AddContext) Expr_infix4() IExpr_infix4Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix4Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix4Context)
}

func (s *AddContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitAdd(s)

	default:
		return t.VisitChildren(s)
	}
}

type SubContext struct {
	*Expr_infix3Context
}

func NewSubContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SubContext {
	var p = new(SubContext)

	p.Expr_infix3Context = NewEmptyExpr_infix3Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix3Context))

	return p
}

func (s *SubContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubContext) Expr_infix3() IExpr_infix3Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix3Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix3Context)
}

func (s *SubContext) MINUS() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMINUS, 0)
}

func (s *SubContext) Expr_infix4() IExpr_infix4Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix4Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix4Context)
}

func (s *SubContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitSub(s)

	default:
		return t.VisitChildren(s)
	}
}

type Infix4Context struct {
	*Expr_infix3Context
}

func NewInfix4Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *Infix4Context {
	var p = new(Infix4Context)

	p.Expr_infix3Context = NewEmptyExpr_infix3Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix3Context))

	return p
}

func (s *Infix4Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Infix4Context) Expr_infix4() IExpr_infix4Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix4Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix4Context)
}

func (s *Infix4Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitInfix4(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Expr_infix3() (localctx IExpr_infix3Context) {
	return p.expr_infix3(0)
}

func (p *WdlV1_1Parser) expr_infix3(_p int) (localctx IExpr_infix3Context) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpr_infix3Context(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpr_infix3Context = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 40
	p.EnterRecursionRule(localctx, 40, WdlV1_1ParserRULE_expr_infix3, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	localctx = NewInfix4Context(p, localctx)
	p.SetParserRuleContext(localctx)
	_prevctx = localctx

	{
		p.SetState(290)
		p.expr_infix4(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(300)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(298)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext()) {
			case 1:
				localctx = NewAddContext(p, NewExpr_infix3Context(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, WdlV1_1ParserRULE_expr_infix3)
				p.SetState(292)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(293)
					p.Match(WdlV1_1ParserPLUS)
				}
				{
					p.SetState(294)
					p.expr_infix4(0)
				}

			case 2:
				localctx = NewSubContext(p, NewExpr_infix3Context(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, WdlV1_1ParserRULE_expr_infix3)
				p.SetState(295)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(296)
					p.Match(WdlV1_1ParserMINUS)
				}
				{
					p.SetState(297)
					p.expr_infix4(0)
				}

			}

		}
		p.SetState(302)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext())
	}

	return localctx
}

// IExpr_infix4Context is an interface to support dynamic dispatch.
type IExpr_infix4Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpr_infix4Context differentiates from other interfaces.
	IsExpr_infix4Context()
}

type Expr_infix4Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpr_infix4Context() *Expr_infix4Context {
	var p = new(Expr_infix4Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_expr_infix4
	return p
}

func (*Expr_infix4Context) IsExpr_infix4Context() {}

func NewExpr_infix4Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expr_infix4Context {
	var p = new(Expr_infix4Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_expr_infix4

	return p
}

func (s *Expr_infix4Context) GetParser() antlr.Parser { return s.parser }

func (s *Expr_infix4Context) CopyFrom(ctx *Expr_infix4Context) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Expr_infix4Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_infix4Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ModContext struct {
	*Expr_infix4Context
}

func NewModContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ModContext {
	var p = new(ModContext)

	p.Expr_infix4Context = NewEmptyExpr_infix4Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix4Context))

	return p
}

func (s *ModContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModContext) Expr_infix4() IExpr_infix4Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix4Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix4Context)
}

func (s *ModContext) MOD() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMOD, 0)
}

func (s *ModContext) Expr_infix5() IExpr_infix5Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix5Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix5Context)
}

func (s *ModContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitMod(s)

	default:
		return t.VisitChildren(s)
	}
}

type MulContext struct {
	*Expr_infix4Context
}

func NewMulContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MulContext {
	var p = new(MulContext)

	p.Expr_infix4Context = NewEmptyExpr_infix4Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix4Context))

	return p
}

func (s *MulContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MulContext) Expr_infix4() IExpr_infix4Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix4Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix4Context)
}

func (s *MulContext) STAR() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserSTAR, 0)
}

func (s *MulContext) Expr_infix5() IExpr_infix5Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix5Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix5Context)
}

func (s *MulContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitMul(s)

	default:
		return t.VisitChildren(s)
	}
}

type DivideContext struct {
	*Expr_infix4Context
}

func NewDivideContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DivideContext {
	var p = new(DivideContext)

	p.Expr_infix4Context = NewEmptyExpr_infix4Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix4Context))

	return p
}

func (s *DivideContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DivideContext) Expr_infix4() IExpr_infix4Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix4Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix4Context)
}

func (s *DivideContext) DIVIDE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserDIVIDE, 0)
}

func (s *DivideContext) Expr_infix5() IExpr_infix5Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix5Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix5Context)
}

func (s *DivideContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitDivide(s)

	default:
		return t.VisitChildren(s)
	}
}

type Infix5Context struct {
	*Expr_infix4Context
}

func NewInfix5Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *Infix5Context {
	var p = new(Infix5Context)

	p.Expr_infix4Context = NewEmptyExpr_infix4Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix4Context))

	return p
}

func (s *Infix5Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Infix5Context) Expr_infix5() IExpr_infix5Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_infix5Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_infix5Context)
}

func (s *Infix5Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitInfix5(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Expr_infix4() (localctx IExpr_infix4Context) {
	return p.expr_infix4(0)
}

func (p *WdlV1_1Parser) expr_infix4(_p int) (localctx IExpr_infix4Context) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpr_infix4Context(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpr_infix4Context = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 42
	p.EnterRecursionRule(localctx, 42, WdlV1_1ParserRULE_expr_infix4, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	localctx = NewInfix5Context(p, localctx)
	p.SetParserRuleContext(localctx)
	_prevctx = localctx

	{
		p.SetState(304)
		p.Expr_infix5()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(317)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 19, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(315)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 18, p.GetParserRuleContext()) {
			case 1:
				localctx = NewMulContext(p, NewExpr_infix4Context(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, WdlV1_1ParserRULE_expr_infix4)
				p.SetState(306)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(307)
					p.Match(WdlV1_1ParserSTAR)
				}
				{
					p.SetState(308)
					p.Expr_infix5()
				}

			case 2:
				localctx = NewDivideContext(p, NewExpr_infix4Context(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, WdlV1_1ParserRULE_expr_infix4)
				p.SetState(309)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(310)
					p.Match(WdlV1_1ParserDIVIDE)
				}
				{
					p.SetState(311)
					p.Expr_infix5()
				}

			case 3:
				localctx = NewModContext(p, NewExpr_infix4Context(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, WdlV1_1ParserRULE_expr_infix4)
				p.SetState(312)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(313)
					p.Match(WdlV1_1ParserMOD)
				}
				{
					p.SetState(314)
					p.Expr_infix5()
				}

			}

		}
		p.SetState(319)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 19, p.GetParserRuleContext())
	}

	return localctx
}

// IExpr_infix5Context is an interface to support dynamic dispatch.
type IExpr_infix5Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpr_infix5Context differentiates from other interfaces.
	IsExpr_infix5Context()
}

type Expr_infix5Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpr_infix5Context() *Expr_infix5Context {
	var p = new(Expr_infix5Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_expr_infix5
	return p
}

func (*Expr_infix5Context) IsExpr_infix5Context() {}

func NewExpr_infix5Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expr_infix5Context {
	var p = new(Expr_infix5Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_expr_infix5

	return p
}

func (s *Expr_infix5Context) GetParser() antlr.Parser { return s.parser }

func (s *Expr_infix5Context) Expr_core() IExpr_coreContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_coreContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_coreContext)
}

func (s *Expr_infix5Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_infix5Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expr_infix5Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitExpr_infix5(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Expr_infix5() (localctx IExpr_infix5Context) {
	this := p
	_ = this

	localctx = NewExpr_infix5Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, WdlV1_1ParserRULE_expr_infix5)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(320)
		p.expr_core(0)
	}

	return localctx
}

// IMemberContext is an interface to support dynamic dispatch.
type IMemberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMemberContext differentiates from other interfaces.
	IsMemberContext()
}

type MemberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemberContext() *MemberContext {
	var p = new(MemberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_member
	return p
}

func (*MemberContext) IsMemberContext() {}

func NewMemberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemberContext {
	var p = new(MemberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_member

	return p
}

func (s *MemberContext) GetParser() antlr.Parser { return s.parser }

func (s *MemberContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *MemberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitMember(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Member() (localctx IMemberContext) {
	this := p
	_ = this

	localctx = NewMemberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, WdlV1_1ParserRULE_member)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(322)
		p.Match(WdlV1_1ParserIdentifier)
	}

	return localctx
}

// IExpr_coreContext is an interface to support dynamic dispatch.
type IExpr_coreContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpr_coreContext differentiates from other interfaces.
	IsExpr_coreContext()
}

type Expr_coreContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpr_coreContext() *Expr_coreContext {
	var p = new(Expr_coreContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_expr_core
	return p
}

func (*Expr_coreContext) IsExpr_coreContext() {}

func NewExpr_coreContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expr_coreContext {
	var p = new(Expr_coreContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_expr_core

	return p
}

func (s *Expr_coreContext) GetParser() antlr.Parser { return s.parser }

func (s *Expr_coreContext) CopyFrom(ctx *Expr_coreContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Expr_coreContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_coreContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Pair_literalContext struct {
	*Expr_coreContext
}

func NewPair_literalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Pair_literalContext {
	var p = new(Pair_literalContext)

	p.Expr_coreContext = NewEmptyExpr_coreContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_coreContext))

	return p
}

func (s *Pair_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pair_literalContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLPAREN, 0)
}

func (s *Pair_literalContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Pair_literalContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Pair_literalContext) COMMA() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCOMMA, 0)
}

func (s *Pair_literalContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRPAREN, 0)
}

func (s *Pair_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitPair_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

type UnarysignedContext struct {
	*Expr_coreContext
}

func NewUnarysignedContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnarysignedContext {
	var p = new(UnarysignedContext)

	p.Expr_coreContext = NewEmptyExpr_coreContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_coreContext))

	return p
}

func (s *UnarysignedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnarysignedContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *UnarysignedContext) PLUS() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserPLUS, 0)
}

func (s *UnarysignedContext) MINUS() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMINUS, 0)
}

func (s *UnarysignedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitUnarysigned(s)

	default:
		return t.VisitChildren(s)
	}
}

type ApplyContext struct {
	*Expr_coreContext
}

func NewApplyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ApplyContext {
	var p = new(ApplyContext)

	p.Expr_coreContext = NewEmptyExpr_coreContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_coreContext))

	return p
}

func (s *ApplyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ApplyContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *ApplyContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLPAREN, 0)
}

func (s *ApplyContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRPAREN, 0)
}

func (s *ApplyContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ApplyContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ApplyContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserCOMMA)
}

func (s *ApplyContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCOMMA, i)
}

func (s *ApplyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitApply(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expression_groupContext struct {
	*Expr_coreContext
}

func NewExpression_groupContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expression_groupContext {
	var p = new(Expression_groupContext)

	p.Expr_coreContext = NewEmptyExpr_coreContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_coreContext))

	return p
}

func (s *Expression_groupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_groupContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLPAREN, 0)
}

func (s *Expression_groupContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expression_groupContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRPAREN, 0)
}

func (s *Expression_groupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitExpression_group(s)

	default:
		return t.VisitChildren(s)
	}
}

type PrimitivesContext struct {
	*Expr_coreContext
}

func NewPrimitivesContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimitivesContext {
	var p = new(PrimitivesContext)

	p.Expr_coreContext = NewEmptyExpr_coreContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_coreContext))

	return p
}

func (s *PrimitivesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimitivesContext) Primitive_literal() IPrimitive_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimitive_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimitive_literalContext)
}

func (s *PrimitivesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitPrimitives(s)

	default:
		return t.VisitChildren(s)
	}
}

type Left_nameContext struct {
	*Expr_coreContext
}

func NewLeft_nameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Left_nameContext {
	var p = new(Left_nameContext)

	p.Expr_coreContext = NewEmptyExpr_coreContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_coreContext))

	return p
}

func (s *Left_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Left_nameContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *Left_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitLeft_name(s)

	default:
		return t.VisitChildren(s)
	}
}

type AtContext struct {
	*Expr_coreContext
}

func NewAtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AtContext {
	var p = new(AtContext)

	p.Expr_coreContext = NewEmptyExpr_coreContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_coreContext))

	return p
}

func (s *AtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AtContext) Expr_core() IExpr_coreContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_coreContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_coreContext)
}

func (s *AtContext) LBRACK() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACK, 0)
}

func (s *AtContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *AtContext) RBRACK() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACK, 0)
}

func (s *AtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitAt(s)

	default:
		return t.VisitChildren(s)
	}
}

type NegateContext struct {
	*Expr_coreContext
}

func NewNegateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NegateContext {
	var p = new(NegateContext)

	p.Expr_coreContext = NewEmptyExpr_coreContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_coreContext))

	return p
}

func (s *NegateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NegateContext) NOT() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserNOT, 0)
}

func (s *NegateContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *NegateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitNegate(s)

	default:
		return t.VisitChildren(s)
	}
}

type Map_literalContext struct {
	*Expr_coreContext
}

func NewMap_literalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Map_literalContext {
	var p = new(Map_literalContext)

	p.Expr_coreContext = NewEmptyExpr_coreContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_coreContext))

	return p
}

func (s *Map_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Map_literalContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACE, 0)
}

func (s *Map_literalContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *Map_literalContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Map_literalContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Map_literalContext) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserCOLON)
}

func (s *Map_literalContext) COLON(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCOLON, i)
}

func (s *Map_literalContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserCOMMA)
}

func (s *Map_literalContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCOMMA, i)
}

func (s *Map_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitMap_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

type IfthenelseContext struct {
	*Expr_coreContext
}

func NewIfthenelseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IfthenelseContext {
	var p = new(IfthenelseContext)

	p.Expr_coreContext = NewEmptyExpr_coreContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_coreContext))

	return p
}

func (s *IfthenelseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfthenelseContext) IF() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIF, 0)
}

func (s *IfthenelseContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *IfthenelseContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IfthenelseContext) THEN() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserTHEN, 0)
}

func (s *IfthenelseContext) ELSE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserELSE, 0)
}

func (s *IfthenelseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitIfthenelse(s)

	default:
		return t.VisitChildren(s)
	}
}

type Get_nameContext struct {
	*Expr_coreContext
}

func NewGet_nameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Get_nameContext {
	var p = new(Get_nameContext)

	p.Expr_coreContext = NewEmptyExpr_coreContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_coreContext))

	return p
}

func (s *Get_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Get_nameContext) Expr_core() IExpr_coreContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_coreContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_coreContext)
}

func (s *Get_nameContext) DOT() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserDOT, 0)
}

func (s *Get_nameContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *Get_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitGet_name(s)

	default:
		return t.VisitChildren(s)
	}
}

type Object_literalContext struct {
	*Expr_coreContext
}

func NewObject_literalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Object_literalContext {
	var p = new(Object_literalContext)

	p.Expr_coreContext = NewEmptyExpr_coreContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_coreContext))

	return p
}

func (s *Object_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Object_literalContext) OBJECTLITERAL() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserOBJECTLITERAL, 0)
}

func (s *Object_literalContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACE, 0)
}

func (s *Object_literalContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *Object_literalContext) AllMember() []IMemberContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMemberContext); ok {
			len++
		}
	}

	tst := make([]IMemberContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMemberContext); ok {
			tst[i] = t.(IMemberContext)
			i++
		}
	}

	return tst
}

func (s *Object_literalContext) Member(i int) IMemberContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMemberContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMemberContext)
}

func (s *Object_literalContext) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserCOLON)
}

func (s *Object_literalContext) COLON(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCOLON, i)
}

func (s *Object_literalContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Object_literalContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Object_literalContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserCOMMA)
}

func (s *Object_literalContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCOMMA, i)
}

func (s *Object_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitObject_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

type Array_literalContext struct {
	*Expr_coreContext
}

func NewArray_literalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Array_literalContext {
	var p = new(Array_literalContext)

	p.Expr_coreContext = NewEmptyExpr_coreContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_coreContext))

	return p
}

func (s *Array_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_literalContext) LBRACK() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACK, 0)
}

func (s *Array_literalContext) RBRACK() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACK, 0)
}

func (s *Array_literalContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Array_literalContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Array_literalContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserCOMMA)
}

func (s *Array_literalContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCOMMA, i)
}

func (s *Array_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitArray_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

type Struct_literalContext struct {
	*Expr_coreContext
}

func NewStruct_literalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Struct_literalContext {
	var p = new(Struct_literalContext)

	p.Expr_coreContext = NewEmptyExpr_coreContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_coreContext))

	return p
}

func (s *Struct_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Struct_literalContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *Struct_literalContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACE, 0)
}

func (s *Struct_literalContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *Struct_literalContext) AllMember() []IMemberContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMemberContext); ok {
			len++
		}
	}

	tst := make([]IMemberContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMemberContext); ok {
			tst[i] = t.(IMemberContext)
			i++
		}
	}

	return tst
}

func (s *Struct_literalContext) Member(i int) IMemberContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMemberContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMemberContext)
}

func (s *Struct_literalContext) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserCOLON)
}

func (s *Struct_literalContext) COLON(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCOLON, i)
}

func (s *Struct_literalContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Struct_literalContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Struct_literalContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserCOMMA)
}

func (s *Struct_literalContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCOMMA, i)
}

func (s *Struct_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitStruct_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Expr_core() (localctx IExpr_coreContext) {
	return p.expr_core(0)
}

func (p *WdlV1_1Parser) expr_core(_p int) (localctx IExpr_coreContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpr_coreContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpr_coreContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 48
	p.EnterRecursionRule(localctx, 48, WdlV1_1ParserRULE_expr_core, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(453)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext()) {
	case 1:
		localctx = NewApplyContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(325)
			p.Match(WdlV1_1ParserIdentifier)
		}
		{
			p.SetState(326)
			p.Match(WdlV1_1ParserLPAREN)
		}
		p.SetState(338)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64((_la-9)) & ^0x3f) == 0 && ((int64(1)<<(_la-9))&3189392972886573057) != 0 {
			{
				p.SetState(327)
				p.Expr()
			}
			p.SetState(332)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 20, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(328)
						p.Match(WdlV1_1ParserCOMMA)
					}
					{
						p.SetState(329)
						p.Expr()
					}

				}
				p.SetState(334)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 20, p.GetParserRuleContext())
			}
			p.SetState(336)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == WdlV1_1ParserCOMMA {
				{
					p.SetState(335)
					p.Match(WdlV1_1ParserCOMMA)
				}

			}

		}
		{
			p.SetState(340)
			p.Match(WdlV1_1ParserRPAREN)
		}

	case 2:
		localctx = NewArray_literalContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(341)
			p.Match(WdlV1_1ParserLBRACK)
		}
		p.SetState(355)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (int64((_la-9)) & ^0x3f) == 0 && ((int64(1)<<(_la-9))&3189392972886573057) != 0 {
			{
				p.SetState(342)
				p.Expr()
			}
			p.SetState(347)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 23, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(343)
						p.Match(WdlV1_1ParserCOMMA)
					}
					{
						p.SetState(344)
						p.Expr()
					}

				}
				p.SetState(349)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 23, p.GetParserRuleContext())
			}
			p.SetState(351)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == WdlV1_1ParserCOMMA {
				{
					p.SetState(350)
					p.Match(WdlV1_1ParserCOMMA)
				}

			}

			p.SetState(357)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(358)
			p.Match(WdlV1_1ParserRBRACK)
		}

	case 3:
		localctx = NewPair_literalContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(359)
			p.Match(WdlV1_1ParserLPAREN)
		}
		{
			p.SetState(360)
			p.Expr()
		}
		{
			p.SetState(361)
			p.Match(WdlV1_1ParserCOMMA)
		}
		{
			p.SetState(362)
			p.Expr()
		}
		{
			p.SetState(363)
			p.Match(WdlV1_1ParserRPAREN)
		}

	case 4:
		localctx = NewMap_literalContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(365)
			p.Match(WdlV1_1ParserLBRACE)
		}
		p.SetState(384)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (int64((_la-9)) & ^0x3f) == 0 && ((int64(1)<<(_la-9))&3189392972886573057) != 0 {
			{
				p.SetState(366)
				p.Expr()
			}
			{
				p.SetState(367)
				p.Match(WdlV1_1ParserCOLON)
			}
			{
				p.SetState(368)
				p.Expr()
			}
			p.SetState(376)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 26, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(369)
						p.Match(WdlV1_1ParserCOMMA)
					}
					{
						p.SetState(370)
						p.Expr()
					}
					{
						p.SetState(371)
						p.Match(WdlV1_1ParserCOLON)
					}
					{
						p.SetState(372)
						p.Expr()
					}

				}
				p.SetState(378)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 26, p.GetParserRuleContext())
			}
			p.SetState(380)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == WdlV1_1ParserCOMMA {
				{
					p.SetState(379)
					p.Match(WdlV1_1ParserCOMMA)
				}

			}

			p.SetState(386)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(387)
			p.Match(WdlV1_1ParserRBRACE)
		}

	case 5:
		localctx = NewObject_literalContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(388)
			p.Match(WdlV1_1ParserOBJECTLITERAL)
		}
		{
			p.SetState(389)
			p.Match(WdlV1_1ParserLBRACE)
		}
		p.SetState(408)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == WdlV1_1ParserIdentifier {
			{
				p.SetState(390)
				p.Member()
			}
			{
				p.SetState(391)
				p.Match(WdlV1_1ParserCOLON)
			}
			{
				p.SetState(392)
				p.Expr()
			}
			p.SetState(400)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 29, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(393)
						p.Match(WdlV1_1ParserCOMMA)
					}
					{
						p.SetState(394)
						p.Member()
					}
					{
						p.SetState(395)
						p.Match(WdlV1_1ParserCOLON)
					}
					{
						p.SetState(396)
						p.Expr()
					}

				}
				p.SetState(402)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 29, p.GetParserRuleContext())
			}
			p.SetState(404)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == WdlV1_1ParserCOMMA {
				{
					p.SetState(403)
					p.Match(WdlV1_1ParserCOMMA)
				}

			}

			p.SetState(410)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(411)
			p.Match(WdlV1_1ParserRBRACE)
		}

	case 6:
		localctx = NewStruct_literalContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(412)
			p.Match(WdlV1_1ParserIdentifier)
		}
		{
			p.SetState(413)
			p.Match(WdlV1_1ParserLBRACE)
		}
		p.SetState(432)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == WdlV1_1ParserIdentifier {
			{
				p.SetState(414)
				p.Member()
			}
			{
				p.SetState(415)
				p.Match(WdlV1_1ParserCOLON)
			}
			{
				p.SetState(416)
				p.Expr()
			}
			p.SetState(424)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 32, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(417)
						p.Match(WdlV1_1ParserCOMMA)
					}
					{
						p.SetState(418)
						p.Member()
					}
					{
						p.SetState(419)
						p.Match(WdlV1_1ParserCOLON)
					}
					{
						p.SetState(420)
						p.Expr()
					}

				}
				p.SetState(426)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 32, p.GetParserRuleContext())
			}
			p.SetState(428)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == WdlV1_1ParserCOMMA {
				{
					p.SetState(427)
					p.Match(WdlV1_1ParserCOMMA)
				}

			}

			p.SetState(434)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(435)
			p.Match(WdlV1_1ParserRBRACE)
		}

	case 7:
		localctx = NewIfthenelseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(436)
			p.Match(WdlV1_1ParserIF)
		}
		{
			p.SetState(437)
			p.Expr()
		}
		{
			p.SetState(438)
			p.Match(WdlV1_1ParserTHEN)
		}
		{
			p.SetState(439)
			p.Expr()
		}
		{
			p.SetState(440)
			p.Match(WdlV1_1ParserELSE)
		}
		{
			p.SetState(441)
			p.Expr()
		}

	case 8:
		localctx = NewExpression_groupContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(443)
			p.Match(WdlV1_1ParserLPAREN)
		}
		{
			p.SetState(444)
			p.Expr()
		}
		{
			p.SetState(445)
			p.Match(WdlV1_1ParserRPAREN)
		}

	case 9:
		localctx = NewNegateContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(447)
			p.Match(WdlV1_1ParserNOT)
		}
		{
			p.SetState(448)
			p.Expr()
		}

	case 10:
		localctx = NewUnarysignedContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(449)
			_la = p.GetTokenStream().LA(1)

			if !(_la == WdlV1_1ParserPLUS || _la == WdlV1_1ParserMINUS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(450)
			p.Expr()
		}

	case 11:
		localctx = NewPrimitivesContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(451)
			p.Primitive_literal()
		}

	case 12:
		localctx = NewLeft_nameContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(452)
			p.Match(WdlV1_1ParserIdentifier)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(465)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 37, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(463)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext()) {
			case 1:
				localctx = NewAtContext(p, NewExpr_coreContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, WdlV1_1ParserRULE_expr_core)
				p.SetState(455)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(456)
					p.Match(WdlV1_1ParserLBRACK)
				}
				{
					p.SetState(457)
					p.Expr()
				}
				{
					p.SetState(458)
					p.Match(WdlV1_1ParserRBRACK)
				}

			case 2:
				localctx = NewGet_nameContext(p, NewExpr_coreContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, WdlV1_1ParserRULE_expr_core)
				p.SetState(460)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(461)
					p.Match(WdlV1_1ParserDOT)
				}
				{
					p.SetState(462)
					p.Match(WdlV1_1ParserIdentifier)
				}

			}

		}
		p.SetState(467)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 37, p.GetParserRuleContext())
	}

	return localctx
}

// IVersionContext is an interface to support dynamic dispatch.
type IVersionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVersionContext differentiates from other interfaces.
	IsVersionContext()
}

type VersionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVersionContext() *VersionContext {
	var p = new(VersionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_version
	return p
}

func (*VersionContext) IsVersionContext() {}

func NewVersionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VersionContext {
	var p = new(VersionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_version

	return p
}

func (s *VersionContext) GetParser() antlr.Parser { return s.parser }

func (s *VersionContext) VERSION() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserVERSION, 0)
}

func (s *VersionContext) ReleaseVersion() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserReleaseVersion, 0)
}

func (s *VersionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VersionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VersionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitVersion(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Version() (localctx IVersionContext) {
	this := p
	_ = this

	localctx = NewVersionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, WdlV1_1ParserRULE_version)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(468)
		p.Match(WdlV1_1ParserVERSION)
	}
	{
		p.SetState(469)
		p.Match(WdlV1_1ParserReleaseVersion)
	}

	return localctx
}

// IImport_aliasContext is an interface to support dynamic dispatch.
type IImport_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImport_aliasContext differentiates from other interfaces.
	IsImport_aliasContext()
}

type Import_aliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImport_aliasContext() *Import_aliasContext {
	var p = new(Import_aliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_import_alias
	return p
}

func (*Import_aliasContext) IsImport_aliasContext() {}

func NewImport_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Import_aliasContext {
	var p = new(Import_aliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_import_alias

	return p
}

func (s *Import_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *Import_aliasContext) ALIAS() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserALIAS, 0)
}

func (s *Import_aliasContext) AllIdentifier() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserIdentifier)
}

func (s *Import_aliasContext) Identifier(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, i)
}

func (s *Import_aliasContext) AS() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserAS, 0)
}

func (s *Import_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Import_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Import_aliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitImport_alias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Import_alias() (localctx IImport_aliasContext) {
	this := p
	_ = this

	localctx = NewImport_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, WdlV1_1ParserRULE_import_alias)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(471)
		p.Match(WdlV1_1ParserALIAS)
	}
	{
		p.SetState(472)
		p.Match(WdlV1_1ParserIdentifier)
	}
	{
		p.SetState(473)
		p.Match(WdlV1_1ParserAS)
	}
	{
		p.SetState(474)
		p.Match(WdlV1_1ParserIdentifier)
	}

	return localctx
}

// IImport_asContext is an interface to support dynamic dispatch.
type IImport_asContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImport_asContext differentiates from other interfaces.
	IsImport_asContext()
}

type Import_asContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImport_asContext() *Import_asContext {
	var p = new(Import_asContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_import_as
	return p
}

func (*Import_asContext) IsImport_asContext() {}

func NewImport_asContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Import_asContext {
	var p = new(Import_asContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_import_as

	return p
}

func (s *Import_asContext) GetParser() antlr.Parser { return s.parser }

func (s *Import_asContext) AS() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserAS, 0)
}

func (s *Import_asContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *Import_asContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Import_asContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Import_asContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitImport_as(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Import_as() (localctx IImport_asContext) {
	this := p
	_ = this

	localctx = NewImport_asContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, WdlV1_1ParserRULE_import_as)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(476)
		p.Match(WdlV1_1ParserAS)
	}
	{
		p.SetState(477)
		p.Match(WdlV1_1ParserIdentifier)
	}

	return localctx
}

// IImport_docContext is an interface to support dynamic dispatch.
type IImport_docContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImport_docContext differentiates from other interfaces.
	IsImport_docContext()
}

type Import_docContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImport_docContext() *Import_docContext {
	var p = new(Import_docContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_import_doc
	return p
}

func (*Import_docContext) IsImport_docContext() {}

func NewImport_docContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Import_docContext {
	var p = new(Import_docContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_import_doc

	return p
}

func (s *Import_docContext) GetParser() antlr.Parser { return s.parser }

func (s *Import_docContext) IMPORT() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIMPORT, 0)
}

func (s *Import_docContext) String_() IStringContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringContext)
}

func (s *Import_docContext) Import_as() IImport_asContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImport_asContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImport_asContext)
}

func (s *Import_docContext) AllImport_alias() []IImport_aliasContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IImport_aliasContext); ok {
			len++
		}
	}

	tst := make([]IImport_aliasContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IImport_aliasContext); ok {
			tst[i] = t.(IImport_aliasContext)
			i++
		}
	}

	return tst
}

func (s *Import_docContext) Import_alias(i int) IImport_aliasContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImport_aliasContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImport_aliasContext)
}

func (s *Import_docContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Import_docContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Import_docContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitImport_doc(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Import_doc() (localctx IImport_docContext) {
	this := p
	_ = this

	localctx = NewImport_docContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, WdlV1_1ParserRULE_import_doc)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(479)
		p.Match(WdlV1_1ParserIMPORT)
	}
	{
		p.SetState(480)
		p.String_()
	}
	p.SetState(482)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == WdlV1_1ParserAS {
		{
			p.SetState(481)
			p.Import_as()
		}

	}
	p.SetState(487)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == WdlV1_1ParserALIAS {
		{
			p.SetState(484)
			p.Import_alias()
		}

		p.SetState(489)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IStructContext is an interface to support dynamic dispatch.
type IStructContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructContext differentiates from other interfaces.
	IsStructContext()
}

type StructContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructContext() *StructContext {
	var p = new(StructContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_struct
	return p
}

func (*StructContext) IsStructContext() {}

func NewStructContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructContext {
	var p = new(StructContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_struct

	return p
}

func (s *StructContext) GetParser() antlr.Parser { return s.parser }

func (s *StructContext) STRUCT() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserSTRUCT, 0)
}

func (s *StructContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *StructContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACE, 0)
}

func (s *StructContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *StructContext) AllUnbound_decls() []IUnbound_declsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IUnbound_declsContext); ok {
			len++
		}
	}

	tst := make([]IUnbound_declsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IUnbound_declsContext); ok {
			tst[i] = t.(IUnbound_declsContext)
			i++
		}
	}

	return tst
}

func (s *StructContext) Unbound_decls(i int) IUnbound_declsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnbound_declsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnbound_declsContext)
}

func (s *StructContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitStruct(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Struct_() (localctx IStructContext) {
	this := p
	_ = this

	localctx = NewStructContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, WdlV1_1ParserRULE_struct)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(490)
		p.Match(WdlV1_1ParserSTRUCT)
	}
	{
		p.SetState(491)
		p.Match(WdlV1_1ParserIdentifier)
	}
	{
		p.SetState(492)
		p.Match(WdlV1_1ParserLBRACE)
	}
	p.SetState(496)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-20)) & ^0x3f) == 0 && ((int64(1)<<(_la-20))&1125899906844927) != 0 {
		{
			p.SetState(493)
			p.Unbound_decls()
		}

		p.SetState(498)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(499)
		p.Match(WdlV1_1ParserRBRACE)
	}

	return localctx
}

// IMeta_valueContext is an interface to support dynamic dispatch.
type IMeta_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMeta_valueContext differentiates from other interfaces.
	IsMeta_valueContext()
}

type Meta_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMeta_valueContext() *Meta_valueContext {
	var p = new(Meta_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_meta_value
	return p
}

func (*Meta_valueContext) IsMeta_valueContext() {}

func NewMeta_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Meta_valueContext {
	var p = new(Meta_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_meta_value

	return p
}

func (s *Meta_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Meta_valueContext) MetaNull() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaNull, 0)
}

func (s *Meta_valueContext) MetaBool() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaBool, 0)
}

func (s *Meta_valueContext) MetaInt() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaInt, 0)
}

func (s *Meta_valueContext) MetaFloat() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaFloat, 0)
}

func (s *Meta_valueContext) Meta_string() IMeta_stringContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMeta_stringContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMeta_stringContext)
}

func (s *Meta_valueContext) Meta_object() IMeta_objectContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMeta_objectContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMeta_objectContext)
}

func (s *Meta_valueContext) Meta_array() IMeta_arrayContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMeta_arrayContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMeta_arrayContext)
}

func (s *Meta_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Meta_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Meta_valueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitMeta_value(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Meta_value() (localctx IMeta_valueContext) {
	this := p
	_ = this

	localctx = NewMeta_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, WdlV1_1ParserRULE_meta_value)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(508)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case WdlV1_1ParserMetaNull:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(501)
			p.Match(WdlV1_1ParserMetaNull)
		}

	case WdlV1_1ParserMetaBool:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(502)
			p.Match(WdlV1_1ParserMetaBool)
		}

	case WdlV1_1ParserMetaInt:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(503)
			p.Match(WdlV1_1ParserMetaInt)
		}

	case WdlV1_1ParserMetaFloat:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(504)
			p.Match(WdlV1_1ParserMetaFloat)
		}

	case WdlV1_1ParserMetaSquote, WdlV1_1ParserMetaDquote:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(505)
			p.Meta_string()
		}

	case WdlV1_1ParserMetaEmptyObject, WdlV1_1ParserMetaLbrace:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(506)
			p.Meta_object()
		}

	case WdlV1_1ParserMetaEmptyArray, WdlV1_1ParserMetaLbrack:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(507)
			p.Meta_array()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IMeta_string_partContext is an interface to support dynamic dispatch.
type IMeta_string_partContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMeta_string_partContext differentiates from other interfaces.
	IsMeta_string_partContext()
}

type Meta_string_partContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMeta_string_partContext() *Meta_string_partContext {
	var p = new(Meta_string_partContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_meta_string_part
	return p
}

func (*Meta_string_partContext) IsMeta_string_partContext() {}

func NewMeta_string_partContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Meta_string_partContext {
	var p = new(Meta_string_partContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_meta_string_part

	return p
}

func (s *Meta_string_partContext) GetParser() antlr.Parser { return s.parser }

func (s *Meta_string_partContext) AllMetaStringPart() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserMetaStringPart)
}

func (s *Meta_string_partContext) MetaStringPart(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaStringPart, i)
}

func (s *Meta_string_partContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Meta_string_partContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Meta_string_partContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitMeta_string_part(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Meta_string_part() (localctx IMeta_string_partContext) {
	this := p
	_ = this

	localctx = NewMeta_string_partContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, WdlV1_1ParserRULE_meta_string_part)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(513)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == WdlV1_1ParserMetaStringPart {
		{
			p.SetState(510)
			p.Match(WdlV1_1ParserMetaStringPart)
		}

		p.SetState(515)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IMeta_stringContext is an interface to support dynamic dispatch.
type IMeta_stringContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMeta_stringContext differentiates from other interfaces.
	IsMeta_stringContext()
}

type Meta_stringContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMeta_stringContext() *Meta_stringContext {
	var p = new(Meta_stringContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_meta_string
	return p
}

func (*Meta_stringContext) IsMeta_stringContext() {}

func NewMeta_stringContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Meta_stringContext {
	var p = new(Meta_stringContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_meta_string

	return p
}

func (s *Meta_stringContext) GetParser() antlr.Parser { return s.parser }

func (s *Meta_stringContext) AllMetaDquote() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserMetaDquote)
}

func (s *Meta_stringContext) MetaDquote(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaDquote, i)
}

func (s *Meta_stringContext) Meta_string_part() IMeta_string_partContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMeta_string_partContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMeta_string_partContext)
}

func (s *Meta_stringContext) AllMetaSquote() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserMetaSquote)
}

func (s *Meta_stringContext) MetaSquote(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaSquote, i)
}

func (s *Meta_stringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Meta_stringContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Meta_stringContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitMeta_string(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Meta_string() (localctx IMeta_stringContext) {
	this := p
	_ = this

	localctx = NewMeta_stringContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, WdlV1_1ParserRULE_meta_string)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(524)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case WdlV1_1ParserMetaDquote:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(516)
			p.Match(WdlV1_1ParserMetaDquote)
		}
		{
			p.SetState(517)
			p.Meta_string_part()
		}
		{
			p.SetState(518)
			p.Match(WdlV1_1ParserMetaDquote)
		}

	case WdlV1_1ParserMetaSquote:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(520)
			p.Match(WdlV1_1ParserMetaSquote)
		}
		{
			p.SetState(521)
			p.Meta_string_part()
		}
		{
			p.SetState(522)
			p.Match(WdlV1_1ParserMetaSquote)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IMeta_arrayContext is an interface to support dynamic dispatch.
type IMeta_arrayContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMeta_arrayContext differentiates from other interfaces.
	IsMeta_arrayContext()
}

type Meta_arrayContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMeta_arrayContext() *Meta_arrayContext {
	var p = new(Meta_arrayContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_meta_array
	return p
}

func (*Meta_arrayContext) IsMeta_arrayContext() {}

func NewMeta_arrayContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Meta_arrayContext {
	var p = new(Meta_arrayContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_meta_array

	return p
}

func (s *Meta_arrayContext) GetParser() antlr.Parser { return s.parser }

func (s *Meta_arrayContext) MetaEmptyArray() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaEmptyArray, 0)
}

func (s *Meta_arrayContext) MetaLbrack() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaLbrack, 0)
}

func (s *Meta_arrayContext) AllMeta_value() []IMeta_valueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMeta_valueContext); ok {
			len++
		}
	}

	tst := make([]IMeta_valueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMeta_valueContext); ok {
			tst[i] = t.(IMeta_valueContext)
			i++
		}
	}

	return tst
}

func (s *Meta_arrayContext) Meta_value(i int) IMeta_valueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMeta_valueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMeta_valueContext)
}

func (s *Meta_arrayContext) MetaArrayCommaRbrack() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaArrayCommaRbrack, 0)
}

func (s *Meta_arrayContext) MetaRbrack() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaRbrack, 0)
}

func (s *Meta_arrayContext) AllMetaArrayComma() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserMetaArrayComma)
}

func (s *Meta_arrayContext) MetaArrayComma(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaArrayComma, i)
}

func (s *Meta_arrayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Meta_arrayContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Meta_arrayContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitMeta_array(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Meta_array() (localctx IMeta_arrayContext) {
	this := p
	_ = this

	localctx = NewMeta_arrayContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, WdlV1_1ParserRULE_meta_array)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(538)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case WdlV1_1ParserMetaEmptyArray:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(526)
			p.Match(WdlV1_1ParserMetaEmptyArray)
		}

	case WdlV1_1ParserMetaLbrack:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(527)
			p.Match(WdlV1_1ParserMetaLbrack)
		}
		{
			p.SetState(528)
			p.Meta_value()
		}
		p.SetState(533)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == WdlV1_1ParserMetaArrayComma {
			{
				p.SetState(529)
				p.Match(WdlV1_1ParserMetaArrayComma)
			}
			{
				p.SetState(530)
				p.Meta_value()
			}

			p.SetState(535)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(536)
			_la = p.GetTokenStream().LA(1)

			if !(_la == WdlV1_1ParserMetaArrayCommaRbrack || _la == WdlV1_1ParserMetaRbrack) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IMeta_objectContext is an interface to support dynamic dispatch.
type IMeta_objectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMeta_objectContext differentiates from other interfaces.
	IsMeta_objectContext()
}

type Meta_objectContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMeta_objectContext() *Meta_objectContext {
	var p = new(Meta_objectContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_meta_object
	return p
}

func (*Meta_objectContext) IsMeta_objectContext() {}

func NewMeta_objectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Meta_objectContext {
	var p = new(Meta_objectContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_meta_object

	return p
}

func (s *Meta_objectContext) GetParser() antlr.Parser { return s.parser }

func (s *Meta_objectContext) MetaEmptyObject() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaEmptyObject, 0)
}

func (s *Meta_objectContext) MetaLbrace() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaLbrace, 0)
}

func (s *Meta_objectContext) AllMeta_object_kv() []IMeta_object_kvContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMeta_object_kvContext); ok {
			len++
		}
	}

	tst := make([]IMeta_object_kvContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMeta_object_kvContext); ok {
			tst[i] = t.(IMeta_object_kvContext)
			i++
		}
	}

	return tst
}

func (s *Meta_objectContext) Meta_object_kv(i int) IMeta_object_kvContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMeta_object_kvContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMeta_object_kvContext)
}

func (s *Meta_objectContext) MetaObjectCommaRbrace() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaObjectCommaRbrace, 0)
}

func (s *Meta_objectContext) MetaRbrace() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaRbrace, 0)
}

func (s *Meta_objectContext) AllMetaObjectComma() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserMetaObjectComma)
}

func (s *Meta_objectContext) MetaObjectComma(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaObjectComma, i)
}

func (s *Meta_objectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Meta_objectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Meta_objectContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitMeta_object(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Meta_object() (localctx IMeta_objectContext) {
	this := p
	_ = this

	localctx = NewMeta_objectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, WdlV1_1ParserRULE_meta_object)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(552)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case WdlV1_1ParserMetaEmptyObject:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(540)
			p.Match(WdlV1_1ParserMetaEmptyObject)
		}

	case WdlV1_1ParserMetaLbrace:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(541)
			p.Match(WdlV1_1ParserMetaLbrace)
		}
		{
			p.SetState(542)
			p.Meta_object_kv()
		}
		p.SetState(547)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == WdlV1_1ParserMetaObjectComma {
			{
				p.SetState(543)
				p.Match(WdlV1_1ParserMetaObjectComma)
			}
			{
				p.SetState(544)
				p.Meta_object_kv()
			}

			p.SetState(549)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(550)
			_la = p.GetTokenStream().LA(1)

			if !(_la == WdlV1_1ParserMetaObjectCommaRbrace || _la == WdlV1_1ParserMetaRbrace) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IMeta_object_kvContext is an interface to support dynamic dispatch.
type IMeta_object_kvContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMeta_object_kvContext differentiates from other interfaces.
	IsMeta_object_kvContext()
}

type Meta_object_kvContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMeta_object_kvContext() *Meta_object_kvContext {
	var p = new(Meta_object_kvContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_meta_object_kv
	return p
}

func (*Meta_object_kvContext) IsMeta_object_kvContext() {}

func NewMeta_object_kvContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Meta_object_kvContext {
	var p = new(Meta_object_kvContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_meta_object_kv

	return p
}

func (s *Meta_object_kvContext) GetParser() antlr.Parser { return s.parser }

func (s *Meta_object_kvContext) MetaObjectIdentifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaObjectIdentifier, 0)
}

func (s *Meta_object_kvContext) MetaObjectColon() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaObjectColon, 0)
}

func (s *Meta_object_kvContext) Meta_value() IMeta_valueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMeta_valueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMeta_valueContext)
}

func (s *Meta_object_kvContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Meta_object_kvContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Meta_object_kvContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitMeta_object_kv(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Meta_object_kv() (localctx IMeta_object_kvContext) {
	this := p
	_ = this

	localctx = NewMeta_object_kvContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, WdlV1_1ParserRULE_meta_object_kv)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(554)
		p.Match(WdlV1_1ParserMetaObjectIdentifier)
	}
	{
		p.SetState(555)
		p.Match(WdlV1_1ParserMetaObjectColon)
	}
	{
		p.SetState(556)
		p.Meta_value()
	}

	return localctx
}

// IMeta_kvContext is an interface to support dynamic dispatch.
type IMeta_kvContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMeta_kvContext differentiates from other interfaces.
	IsMeta_kvContext()
}

type Meta_kvContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMeta_kvContext() *Meta_kvContext {
	var p = new(Meta_kvContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_meta_kv
	return p
}

func (*Meta_kvContext) IsMeta_kvContext() {}

func NewMeta_kvContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Meta_kvContext {
	var p = new(Meta_kvContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_meta_kv

	return p
}

func (s *Meta_kvContext) GetParser() antlr.Parser { return s.parser }

func (s *Meta_kvContext) MetaIdentifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaIdentifier, 0)
}

func (s *Meta_kvContext) MetaColon() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaColon, 0)
}

func (s *Meta_kvContext) Meta_value() IMeta_valueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMeta_valueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMeta_valueContext)
}

func (s *Meta_kvContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Meta_kvContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Meta_kvContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitMeta_kv(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Meta_kv() (localctx IMeta_kvContext) {
	this := p
	_ = this

	localctx = NewMeta_kvContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, WdlV1_1ParserRULE_meta_kv)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(558)
		p.Match(WdlV1_1ParserMetaIdentifier)
	}
	{
		p.SetState(559)
		p.Match(WdlV1_1ParserMetaColon)
	}
	{
		p.SetState(560)
		p.Meta_value()
	}

	return localctx
}

// IParameter_metaContext is an interface to support dynamic dispatch.
type IParameter_metaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameter_metaContext differentiates from other interfaces.
	IsParameter_metaContext()
}

type Parameter_metaContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameter_metaContext() *Parameter_metaContext {
	var p = new(Parameter_metaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_parameter_meta
	return p
}

func (*Parameter_metaContext) IsParameter_metaContext() {}

func NewParameter_metaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parameter_metaContext {
	var p = new(Parameter_metaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_parameter_meta

	return p
}

func (s *Parameter_metaContext) GetParser() antlr.Parser { return s.parser }

func (s *Parameter_metaContext) PARAMETERMETA() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserPARAMETERMETA, 0)
}

func (s *Parameter_metaContext) BeginMeta() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserBeginMeta, 0)
}

func (s *Parameter_metaContext) EndMeta() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserEndMeta, 0)
}

func (s *Parameter_metaContext) AllMeta_kv() []IMeta_kvContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMeta_kvContext); ok {
			len++
		}
	}

	tst := make([]IMeta_kvContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMeta_kvContext); ok {
			tst[i] = t.(IMeta_kvContext)
			i++
		}
	}

	return tst
}

func (s *Parameter_metaContext) Meta_kv(i int) IMeta_kvContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMeta_kvContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMeta_kvContext)
}

func (s *Parameter_metaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parameter_metaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Parameter_metaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitParameter_meta(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Parameter_meta() (localctx IParameter_metaContext) {
	this := p
	_ = this

	localctx = NewParameter_metaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, WdlV1_1ParserRULE_parameter_meta)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(562)
		p.Match(WdlV1_1ParserPARAMETERMETA)
	}
	{
		p.SetState(563)
		p.Match(WdlV1_1ParserBeginMeta)
	}
	p.SetState(567)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == WdlV1_1ParserMetaIdentifier {
		{
			p.SetState(564)
			p.Meta_kv()
		}

		p.SetState(569)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(570)
		p.Match(WdlV1_1ParserEndMeta)
	}

	return localctx
}

// IMetaContext is an interface to support dynamic dispatch.
type IMetaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMetaContext differentiates from other interfaces.
	IsMetaContext()
}

type MetaContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMetaContext() *MetaContext {
	var p = new(MetaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_meta
	return p
}

func (*MetaContext) IsMetaContext() {}

func NewMetaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MetaContext {
	var p = new(MetaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_meta

	return p
}

func (s *MetaContext) GetParser() antlr.Parser { return s.parser }

func (s *MetaContext) META() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMETA, 0)
}

func (s *MetaContext) BeginMeta() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserBeginMeta, 0)
}

func (s *MetaContext) EndMeta() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserEndMeta, 0)
}

func (s *MetaContext) AllMeta_kv() []IMeta_kvContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMeta_kvContext); ok {
			len++
		}
	}

	tst := make([]IMeta_kvContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMeta_kvContext); ok {
			tst[i] = t.(IMeta_kvContext)
			i++
		}
	}

	return tst
}

func (s *MetaContext) Meta_kv(i int) IMeta_kvContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMeta_kvContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMeta_kvContext)
}

func (s *MetaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MetaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MetaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitMeta(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Meta() (localctx IMetaContext) {
	this := p
	_ = this

	localctx = NewMetaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, WdlV1_1ParserRULE_meta)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(572)
		p.Match(WdlV1_1ParserMETA)
	}
	{
		p.SetState(573)
		p.Match(WdlV1_1ParserBeginMeta)
	}
	p.SetState(577)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == WdlV1_1ParserMetaIdentifier {
		{
			p.SetState(574)
			p.Meta_kv()
		}

		p.SetState(579)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(580)
		p.Match(WdlV1_1ParserEndMeta)
	}

	return localctx
}

// ITask_runtime_kvContext is an interface to support dynamic dispatch.
type ITask_runtime_kvContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTask_runtime_kvContext differentiates from other interfaces.
	IsTask_runtime_kvContext()
}

type Task_runtime_kvContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTask_runtime_kvContext() *Task_runtime_kvContext {
	var p = new(Task_runtime_kvContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_task_runtime_kv
	return p
}

func (*Task_runtime_kvContext) IsTask_runtime_kvContext() {}

func NewTask_runtime_kvContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Task_runtime_kvContext {
	var p = new(Task_runtime_kvContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_task_runtime_kv

	return p
}

func (s *Task_runtime_kvContext) GetParser() antlr.Parser { return s.parser }

func (s *Task_runtime_kvContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *Task_runtime_kvContext) COLON() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCOLON, 0)
}

func (s *Task_runtime_kvContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Task_runtime_kvContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Task_runtime_kvContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Task_runtime_kvContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitTask_runtime_kv(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Task_runtime_kv() (localctx ITask_runtime_kvContext) {
	this := p
	_ = this

	localctx = NewTask_runtime_kvContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, WdlV1_1ParserRULE_task_runtime_kv)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(582)
		p.Match(WdlV1_1ParserIdentifier)
	}
	{
		p.SetState(583)
		p.Match(WdlV1_1ParserCOLON)
	}
	{
		p.SetState(584)
		p.Expr()
	}

	return localctx
}

// ITask_runtimeContext is an interface to support dynamic dispatch.
type ITask_runtimeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTask_runtimeContext differentiates from other interfaces.
	IsTask_runtimeContext()
}

type Task_runtimeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTask_runtimeContext() *Task_runtimeContext {
	var p = new(Task_runtimeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_task_runtime
	return p
}

func (*Task_runtimeContext) IsTask_runtimeContext() {}

func NewTask_runtimeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Task_runtimeContext {
	var p = new(Task_runtimeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_task_runtime

	return p
}

func (s *Task_runtimeContext) GetParser() antlr.Parser { return s.parser }

func (s *Task_runtimeContext) RUNTIME() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRUNTIME, 0)
}

func (s *Task_runtimeContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACE, 0)
}

func (s *Task_runtimeContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *Task_runtimeContext) AllTask_runtime_kv() []ITask_runtime_kvContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITask_runtime_kvContext); ok {
			len++
		}
	}

	tst := make([]ITask_runtime_kvContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITask_runtime_kvContext); ok {
			tst[i] = t.(ITask_runtime_kvContext)
			i++
		}
	}

	return tst
}

func (s *Task_runtimeContext) Task_runtime_kv(i int) ITask_runtime_kvContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITask_runtime_kvContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITask_runtime_kvContext)
}

func (s *Task_runtimeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Task_runtimeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Task_runtimeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitTask_runtime(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Task_runtime() (localctx ITask_runtimeContext) {
	this := p
	_ = this

	localctx = NewTask_runtimeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, WdlV1_1ParserRULE_task_runtime)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(586)
		p.Match(WdlV1_1ParserRUNTIME)
	}
	{
		p.SetState(587)
		p.Match(WdlV1_1ParserLBRACE)
	}
	p.SetState(591)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == WdlV1_1ParserIdentifier {
		{
			p.SetState(588)
			p.Task_runtime_kv()
		}

		p.SetState(593)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(594)
		p.Match(WdlV1_1ParserRBRACE)
	}

	return localctx
}

// ITask_inputContext is an interface to support dynamic dispatch.
type ITask_inputContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTask_inputContext differentiates from other interfaces.
	IsTask_inputContext()
}

type Task_inputContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTask_inputContext() *Task_inputContext {
	var p = new(Task_inputContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_task_input
	return p
}

func (*Task_inputContext) IsTask_inputContext() {}

func NewTask_inputContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Task_inputContext {
	var p = new(Task_inputContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_task_input

	return p
}

func (s *Task_inputContext) GetParser() antlr.Parser { return s.parser }

func (s *Task_inputContext) INPUT() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserINPUT, 0)
}

func (s *Task_inputContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACE, 0)
}

func (s *Task_inputContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *Task_inputContext) AllAny_decls() []IAny_declsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAny_declsContext); ok {
			len++
		}
	}

	tst := make([]IAny_declsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAny_declsContext); ok {
			tst[i] = t.(IAny_declsContext)
			i++
		}
	}

	return tst
}

func (s *Task_inputContext) Any_decls(i int) IAny_declsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_declsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_declsContext)
}

func (s *Task_inputContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Task_inputContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Task_inputContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitTask_input(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Task_input() (localctx ITask_inputContext) {
	this := p
	_ = this

	localctx = NewTask_inputContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, WdlV1_1ParserRULE_task_input)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(596)
		p.Match(WdlV1_1ParserINPUT)
	}
	{
		p.SetState(597)
		p.Match(WdlV1_1ParserLBRACE)
	}
	p.SetState(601)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-20)) & ^0x3f) == 0 && ((int64(1)<<(_la-20))&1125899906844927) != 0 {
		{
			p.SetState(598)
			p.Any_decls()
		}

		p.SetState(603)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(604)
		p.Match(WdlV1_1ParserRBRACE)
	}

	return localctx
}

// ITask_outputContext is an interface to support dynamic dispatch.
type ITask_outputContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTask_outputContext differentiates from other interfaces.
	IsTask_outputContext()
}

type Task_outputContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTask_outputContext() *Task_outputContext {
	var p = new(Task_outputContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_task_output
	return p
}

func (*Task_outputContext) IsTask_outputContext() {}

func NewTask_outputContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Task_outputContext {
	var p = new(Task_outputContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_task_output

	return p
}

func (s *Task_outputContext) GetParser() antlr.Parser { return s.parser }

func (s *Task_outputContext) OUTPUT() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserOUTPUT, 0)
}

func (s *Task_outputContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACE, 0)
}

func (s *Task_outputContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *Task_outputContext) AllBound_decls() []IBound_declsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IBound_declsContext); ok {
			len++
		}
	}

	tst := make([]IBound_declsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IBound_declsContext); ok {
			tst[i] = t.(IBound_declsContext)
			i++
		}
	}

	return tst
}

func (s *Task_outputContext) Bound_decls(i int) IBound_declsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBound_declsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBound_declsContext)
}

func (s *Task_outputContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Task_outputContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Task_outputContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitTask_output(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Task_output() (localctx ITask_outputContext) {
	this := p
	_ = this

	localctx = NewTask_outputContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, WdlV1_1ParserRULE_task_output)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(606)
		p.Match(WdlV1_1ParserOUTPUT)
	}
	{
		p.SetState(607)
		p.Match(WdlV1_1ParserLBRACE)
	}
	p.SetState(611)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-20)) & ^0x3f) == 0 && ((int64(1)<<(_la-20))&1125899906844927) != 0 {
		{
			p.SetState(608)
			p.Bound_decls()
		}

		p.SetState(613)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(614)
		p.Match(WdlV1_1ParserRBRACE)
	}

	return localctx
}

// ITask_command_string_partContext is an interface to support dynamic dispatch.
type ITask_command_string_partContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTask_command_string_partContext differentiates from other interfaces.
	IsTask_command_string_partContext()
}

type Task_command_string_partContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTask_command_string_partContext() *Task_command_string_partContext {
	var p = new(Task_command_string_partContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_task_command_string_part
	return p
}

func (*Task_command_string_partContext) IsTask_command_string_partContext() {}

func NewTask_command_string_partContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Task_command_string_partContext {
	var p = new(Task_command_string_partContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_task_command_string_part

	return p
}

func (s *Task_command_string_partContext) GetParser() antlr.Parser { return s.parser }

func (s *Task_command_string_partContext) AllCommandStringPart() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserCommandStringPart)
}

func (s *Task_command_string_partContext) CommandStringPart(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCommandStringPart, i)
}

func (s *Task_command_string_partContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Task_command_string_partContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Task_command_string_partContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitTask_command_string_part(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Task_command_string_part() (localctx ITask_command_string_partContext) {
	this := p
	_ = this

	localctx = NewTask_command_string_partContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, WdlV1_1ParserRULE_task_command_string_part)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(619)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == WdlV1_1ParserCommandStringPart {
		{
			p.SetState(616)
			p.Match(WdlV1_1ParserCommandStringPart)
		}

		p.SetState(621)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITask_command_expr_partContext is an interface to support dynamic dispatch.
type ITask_command_expr_partContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTask_command_expr_partContext differentiates from other interfaces.
	IsTask_command_expr_partContext()
}

type Task_command_expr_partContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTask_command_expr_partContext() *Task_command_expr_partContext {
	var p = new(Task_command_expr_partContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_task_command_expr_part
	return p
}

func (*Task_command_expr_partContext) IsTask_command_expr_partContext() {}

func NewTask_command_expr_partContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Task_command_expr_partContext {
	var p = new(Task_command_expr_partContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_task_command_expr_part

	return p
}

func (s *Task_command_expr_partContext) GetParser() antlr.Parser { return s.parser }

func (s *Task_command_expr_partContext) StringCommandStart() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserStringCommandStart, 0)
}

func (s *Task_command_expr_partContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Task_command_expr_partContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *Task_command_expr_partContext) AllExpression_placeholder_option() []IExpression_placeholder_optionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpression_placeholder_optionContext); ok {
			len++
		}
	}

	tst := make([]IExpression_placeholder_optionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpression_placeholder_optionContext); ok {
			tst[i] = t.(IExpression_placeholder_optionContext)
			i++
		}
	}

	return tst
}

func (s *Task_command_expr_partContext) Expression_placeholder_option(i int) IExpression_placeholder_optionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_placeholder_optionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_placeholder_optionContext)
}

func (s *Task_command_expr_partContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Task_command_expr_partContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Task_command_expr_partContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitTask_command_expr_part(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Task_command_expr_part() (localctx ITask_command_expr_partContext) {
	this := p
	_ = this

	localctx = NewTask_command_expr_partContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, WdlV1_1ParserRULE_task_command_expr_part)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(622)
		p.Match(WdlV1_1ParserStringCommandStart)
	}
	p.SetState(626)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(623)
				p.Expression_placeholder_option()
			}

		}
		p.SetState(628)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext())
	}
	{
		p.SetState(629)
		p.Expr()
	}
	{
		p.SetState(630)
		p.Match(WdlV1_1ParserRBRACE)
	}

	return localctx
}

// ITask_command_expr_with_stringContext is an interface to support dynamic dispatch.
type ITask_command_expr_with_stringContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTask_command_expr_with_stringContext differentiates from other interfaces.
	IsTask_command_expr_with_stringContext()
}

type Task_command_expr_with_stringContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTask_command_expr_with_stringContext() *Task_command_expr_with_stringContext {
	var p = new(Task_command_expr_with_stringContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_task_command_expr_with_string
	return p
}

func (*Task_command_expr_with_stringContext) IsTask_command_expr_with_stringContext() {}

func NewTask_command_expr_with_stringContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Task_command_expr_with_stringContext {
	var p = new(Task_command_expr_with_stringContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_task_command_expr_with_string

	return p
}

func (s *Task_command_expr_with_stringContext) GetParser() antlr.Parser { return s.parser }

func (s *Task_command_expr_with_stringContext) Task_command_expr_part() ITask_command_expr_partContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITask_command_expr_partContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITask_command_expr_partContext)
}

func (s *Task_command_expr_with_stringContext) Task_command_string_part() ITask_command_string_partContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITask_command_string_partContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITask_command_string_partContext)
}

func (s *Task_command_expr_with_stringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Task_command_expr_with_stringContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Task_command_expr_with_stringContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitTask_command_expr_with_string(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Task_command_expr_with_string() (localctx ITask_command_expr_with_stringContext) {
	this := p
	_ = this

	localctx = NewTask_command_expr_with_stringContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, WdlV1_1ParserRULE_task_command_expr_with_string)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(632)
		p.Task_command_expr_part()
	}
	{
		p.SetState(633)
		p.Task_command_string_part()
	}

	return localctx
}

// ITask_commandContext is an interface to support dynamic dispatch.
type ITask_commandContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTask_commandContext differentiates from other interfaces.
	IsTask_commandContext()
}

type Task_commandContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTask_commandContext() *Task_commandContext {
	var p = new(Task_commandContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_task_command
	return p
}

func (*Task_commandContext) IsTask_commandContext() {}

func NewTask_commandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Task_commandContext {
	var p = new(Task_commandContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_task_command

	return p
}

func (s *Task_commandContext) GetParser() antlr.Parser { return s.parser }

func (s *Task_commandContext) COMMAND() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCOMMAND, 0)
}

func (s *Task_commandContext) BeginLBrace() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserBeginLBrace, 0)
}

func (s *Task_commandContext) Task_command_string_part() ITask_command_string_partContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITask_command_string_partContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITask_command_string_partContext)
}

func (s *Task_commandContext) EndCommand() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserEndCommand, 0)
}

func (s *Task_commandContext) AllTask_command_expr_with_string() []ITask_command_expr_with_stringContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITask_command_expr_with_stringContext); ok {
			len++
		}
	}

	tst := make([]ITask_command_expr_with_stringContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITask_command_expr_with_stringContext); ok {
			tst[i] = t.(ITask_command_expr_with_stringContext)
			i++
		}
	}

	return tst
}

func (s *Task_commandContext) Task_command_expr_with_string(i int) ITask_command_expr_with_stringContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITask_command_expr_with_stringContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITask_command_expr_with_stringContext)
}

func (s *Task_commandContext) BeginHereDoc() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserBeginHereDoc, 0)
}

func (s *Task_commandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Task_commandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Task_commandContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitTask_command(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Task_command() (localctx ITask_commandContext) {
	this := p
	_ = this

	localctx = NewTask_commandContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, WdlV1_1ParserRULE_task_command)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(657)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 57, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(635)
			p.Match(WdlV1_1ParserCOMMAND)
		}
		{
			p.SetState(636)
			p.Match(WdlV1_1ParserBeginLBrace)
		}
		{
			p.SetState(637)
			p.Task_command_string_part()
		}
		p.SetState(641)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == WdlV1_1ParserStringCommandStart {
			{
				p.SetState(638)
				p.Task_command_expr_with_string()
			}

			p.SetState(643)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(644)
			p.Match(WdlV1_1ParserEndCommand)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(646)
			p.Match(WdlV1_1ParserCOMMAND)
		}
		{
			p.SetState(647)
			p.Match(WdlV1_1ParserBeginHereDoc)
		}
		{
			p.SetState(648)
			p.Task_command_string_part()
		}
		p.SetState(652)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == WdlV1_1ParserStringCommandStart {
			{
				p.SetState(649)
				p.Task_command_expr_with_string()
			}

			p.SetState(654)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(655)
			p.Match(WdlV1_1ParserEndCommand)
		}

	}

	return localctx
}

// ITask_elementContext is an interface to support dynamic dispatch.
type ITask_elementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTask_elementContext differentiates from other interfaces.
	IsTask_elementContext()
}

type Task_elementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTask_elementContext() *Task_elementContext {
	var p = new(Task_elementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_task_element
	return p
}

func (*Task_elementContext) IsTask_elementContext() {}

func NewTask_elementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Task_elementContext {
	var p = new(Task_elementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_task_element

	return p
}

func (s *Task_elementContext) GetParser() antlr.Parser { return s.parser }

func (s *Task_elementContext) Task_input() ITask_inputContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITask_inputContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITask_inputContext)
}

func (s *Task_elementContext) Task_output() ITask_outputContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITask_outputContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITask_outputContext)
}

func (s *Task_elementContext) Task_command() ITask_commandContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITask_commandContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITask_commandContext)
}

func (s *Task_elementContext) Task_runtime() ITask_runtimeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITask_runtimeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITask_runtimeContext)
}

func (s *Task_elementContext) Bound_decls() IBound_declsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBound_declsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBound_declsContext)
}

func (s *Task_elementContext) Parameter_meta() IParameter_metaContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParameter_metaContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParameter_metaContext)
}

func (s *Task_elementContext) Meta() IMetaContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMetaContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMetaContext)
}

func (s *Task_elementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Task_elementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Task_elementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitTask_element(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Task_element() (localctx ITask_elementContext) {
	this := p
	_ = this

	localctx = NewTask_elementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, WdlV1_1ParserRULE_task_element)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(666)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case WdlV1_1ParserINPUT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(659)
			p.Task_input()
		}

	case WdlV1_1ParserOUTPUT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(660)
			p.Task_output()
		}

	case WdlV1_1ParserCOMMAND:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(661)
			p.Task_command()
		}

	case WdlV1_1ParserRUNTIME:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(662)
			p.Task_runtime()
		}

	case WdlV1_1ParserBOOLEAN, WdlV1_1ParserINT, WdlV1_1ParserFLOAT, WdlV1_1ParserSTRING, WdlV1_1ParserFILE, WdlV1_1ParserARRAY, WdlV1_1ParserMAP, WdlV1_1ParserOBJECT, WdlV1_1ParserPAIR, WdlV1_1ParserIdentifier:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(663)
			p.Bound_decls()
		}

	case WdlV1_1ParserPARAMETERMETA:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(664)
			p.Parameter_meta()
		}

	case WdlV1_1ParserMETA:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(665)
			p.Meta()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITaskContext is an interface to support dynamic dispatch.
type ITaskContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTaskContext differentiates from other interfaces.
	IsTaskContext()
}

type TaskContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTaskContext() *TaskContext {
	var p = new(TaskContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_task
	return p
}

func (*TaskContext) IsTaskContext() {}

func NewTaskContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TaskContext {
	var p = new(TaskContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_task

	return p
}

func (s *TaskContext) GetParser() antlr.Parser { return s.parser }

func (s *TaskContext) TASK() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserTASK, 0)
}

func (s *TaskContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *TaskContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACE, 0)
}

func (s *TaskContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *TaskContext) AllTask_element() []ITask_elementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITask_elementContext); ok {
			len++
		}
	}

	tst := make([]ITask_elementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITask_elementContext); ok {
			tst[i] = t.(ITask_elementContext)
			i++
		}
	}

	return tst
}

func (s *TaskContext) Task_element(i int) ITask_elementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITask_elementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITask_elementContext)
}

func (s *TaskContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TaskContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TaskContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitTask(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Task() (localctx ITaskContext) {
	this := p
	_ = this

	localctx = NewTaskContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, WdlV1_1ParserRULE_task)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(668)
		p.Match(WdlV1_1ParserTASK)
	}
	{
		p.SetState(669)
		p.Match(WdlV1_1ParserIdentifier)
	}
	{
		p.SetState(670)
		p.Match(WdlV1_1ParserLBRACE)
	}
	p.SetState(672)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (int64((_la-15)) & ^0x3f) == 0 && ((int64(1)<<(_la-15))&36028797019299839) != 0 {
		{
			p.SetState(671)
			p.Task_element()
		}

		p.SetState(674)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(676)
		p.Match(WdlV1_1ParserRBRACE)
	}

	return localctx
}

// IInner_workflow_elementContext is an interface to support dynamic dispatch.
type IInner_workflow_elementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInner_workflow_elementContext differentiates from other interfaces.
	IsInner_workflow_elementContext()
}

type Inner_workflow_elementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInner_workflow_elementContext() *Inner_workflow_elementContext {
	var p = new(Inner_workflow_elementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_inner_workflow_element
	return p
}

func (*Inner_workflow_elementContext) IsInner_workflow_elementContext() {}

func NewInner_workflow_elementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Inner_workflow_elementContext {
	var p = new(Inner_workflow_elementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_inner_workflow_element

	return p
}

func (s *Inner_workflow_elementContext) GetParser() antlr.Parser { return s.parser }

func (s *Inner_workflow_elementContext) Bound_decls() IBound_declsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBound_declsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBound_declsContext)
}

func (s *Inner_workflow_elementContext) Call() ICallContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICallContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICallContext)
}

func (s *Inner_workflow_elementContext) Scatter() IScatterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IScatterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IScatterContext)
}

func (s *Inner_workflow_elementContext) Conditional() IConditionalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConditionalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConditionalContext)
}

func (s *Inner_workflow_elementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Inner_workflow_elementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Inner_workflow_elementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitInner_workflow_element(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Inner_workflow_element() (localctx IInner_workflow_elementContext) {
	this := p
	_ = this

	localctx = NewInner_workflow_elementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, WdlV1_1ParserRULE_inner_workflow_element)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(682)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case WdlV1_1ParserBOOLEAN, WdlV1_1ParserINT, WdlV1_1ParserFLOAT, WdlV1_1ParserSTRING, WdlV1_1ParserFILE, WdlV1_1ParserARRAY, WdlV1_1ParserMAP, WdlV1_1ParserOBJECT, WdlV1_1ParserPAIR, WdlV1_1ParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(678)
			p.Bound_decls()
		}

	case WdlV1_1ParserCALL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(679)
			p.Call()
		}

	case WdlV1_1ParserSCATTER:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(680)
			p.Scatter()
		}

	case WdlV1_1ParserIF:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(681)
			p.Conditional()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICall_aliasContext is an interface to support dynamic dispatch.
type ICall_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCall_aliasContext differentiates from other interfaces.
	IsCall_aliasContext()
}

type Call_aliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCall_aliasContext() *Call_aliasContext {
	var p = new(Call_aliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_call_alias
	return p
}

func (*Call_aliasContext) IsCall_aliasContext() {}

func NewCall_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Call_aliasContext {
	var p = new(Call_aliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_call_alias

	return p
}

func (s *Call_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *Call_aliasContext) AS() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserAS, 0)
}

func (s *Call_aliasContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *Call_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Call_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Call_aliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitCall_alias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Call_alias() (localctx ICall_aliasContext) {
	this := p
	_ = this

	localctx = NewCall_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, WdlV1_1ParserRULE_call_alias)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(684)
		p.Match(WdlV1_1ParserAS)
	}
	{
		p.SetState(685)
		p.Match(WdlV1_1ParserIdentifier)
	}

	return localctx
}

// ICall_inputContext is an interface to support dynamic dispatch.
type ICall_inputContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCall_inputContext differentiates from other interfaces.
	IsCall_inputContext()
}

type Call_inputContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCall_inputContext() *Call_inputContext {
	var p = new(Call_inputContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_call_input
	return p
}

func (*Call_inputContext) IsCall_inputContext() {}

func NewCall_inputContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Call_inputContext {
	var p = new(Call_inputContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_call_input

	return p
}

func (s *Call_inputContext) GetParser() antlr.Parser { return s.parser }

func (s *Call_inputContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *Call_inputContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserEQUAL, 0)
}

func (s *Call_inputContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Call_inputContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Call_inputContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Call_inputContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitCall_input(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Call_input() (localctx ICall_inputContext) {
	this := p
	_ = this

	localctx = NewCall_inputContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, WdlV1_1ParserRULE_call_input)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(687)
		p.Match(WdlV1_1ParserIdentifier)
	}
	p.SetState(690)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == WdlV1_1ParserEQUAL {
		{
			p.SetState(688)
			p.Match(WdlV1_1ParserEQUAL)
		}
		{
			p.SetState(689)
			p.Expr()
		}

	}

	return localctx
}

// ICall_inputsContext is an interface to support dynamic dispatch.
type ICall_inputsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCall_inputsContext differentiates from other interfaces.
	IsCall_inputsContext()
}

type Call_inputsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCall_inputsContext() *Call_inputsContext {
	var p = new(Call_inputsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_call_inputs
	return p
}

func (*Call_inputsContext) IsCall_inputsContext() {}

func NewCall_inputsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Call_inputsContext {
	var p = new(Call_inputsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_call_inputs

	return p
}

func (s *Call_inputsContext) GetParser() antlr.Parser { return s.parser }

func (s *Call_inputsContext) INPUT() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserINPUT, 0)
}

func (s *Call_inputsContext) COLON() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCOLON, 0)
}

func (s *Call_inputsContext) AllCall_input() []ICall_inputContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICall_inputContext); ok {
			len++
		}
	}

	tst := make([]ICall_inputContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICall_inputContext); ok {
			tst[i] = t.(ICall_inputContext)
			i++
		}
	}

	return tst
}

func (s *Call_inputsContext) Call_input(i int) ICall_inputContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICall_inputContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICall_inputContext)
}

func (s *Call_inputsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserCOMMA)
}

func (s *Call_inputsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCOMMA, i)
}

func (s *Call_inputsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Call_inputsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Call_inputsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitCall_inputs(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Call_inputs() (localctx ICall_inputsContext) {
	this := p
	_ = this

	localctx = NewCall_inputsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, WdlV1_1ParserRULE_call_inputs)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(692)
		p.Match(WdlV1_1ParserINPUT)
	}
	{
		p.SetState(693)
		p.Match(WdlV1_1ParserCOLON)
	}
	p.SetState(707)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == WdlV1_1ParserIdentifier {
		{
			p.SetState(694)
			p.Call_input()
		}
		p.SetState(699)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 62, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(695)
					p.Match(WdlV1_1ParserCOMMA)
				}
				{
					p.SetState(696)
					p.Call_input()
				}

			}
			p.SetState(701)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 62, p.GetParserRuleContext())
		}
		p.SetState(703)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == WdlV1_1ParserCOMMA {
			{
				p.SetState(702)
				p.Match(WdlV1_1ParserCOMMA)
			}

		}

		p.SetState(709)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICall_bodyContext is an interface to support dynamic dispatch.
type ICall_bodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCall_bodyContext differentiates from other interfaces.
	IsCall_bodyContext()
}

type Call_bodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCall_bodyContext() *Call_bodyContext {
	var p = new(Call_bodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_call_body
	return p
}

func (*Call_bodyContext) IsCall_bodyContext() {}

func NewCall_bodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Call_bodyContext {
	var p = new(Call_bodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_call_body

	return p
}

func (s *Call_bodyContext) GetParser() antlr.Parser { return s.parser }

func (s *Call_bodyContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACE, 0)
}

func (s *Call_bodyContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *Call_bodyContext) Call_inputs() ICall_inputsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICall_inputsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICall_inputsContext)
}

func (s *Call_bodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Call_bodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Call_bodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitCall_body(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Call_body() (localctx ICall_bodyContext) {
	this := p
	_ = this

	localctx = NewCall_bodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, WdlV1_1ParserRULE_call_body)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(710)
		p.Match(WdlV1_1ParserLBRACE)
	}
	p.SetState(712)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == WdlV1_1ParserINPUT {
		{
			p.SetState(711)
			p.Call_inputs()
		}

	}
	{
		p.SetState(714)
		p.Match(WdlV1_1ParserRBRACE)
	}

	return localctx
}

// ICall_afterContext is an interface to support dynamic dispatch.
type ICall_afterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCall_afterContext differentiates from other interfaces.
	IsCall_afterContext()
}

type Call_afterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCall_afterContext() *Call_afterContext {
	var p = new(Call_afterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_call_after
	return p
}

func (*Call_afterContext) IsCall_afterContext() {}

func NewCall_afterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Call_afterContext {
	var p = new(Call_afterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_call_after

	return p
}

func (s *Call_afterContext) GetParser() antlr.Parser { return s.parser }

func (s *Call_afterContext) AFTER() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserAFTER, 0)
}

func (s *Call_afterContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *Call_afterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Call_afterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Call_afterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitCall_after(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Call_after() (localctx ICall_afterContext) {
	this := p
	_ = this

	localctx = NewCall_afterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, WdlV1_1ParserRULE_call_after)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(716)
		p.Match(WdlV1_1ParserAFTER)
	}
	{
		p.SetState(717)
		p.Match(WdlV1_1ParserIdentifier)
	}

	return localctx
}

// ICall_nameContext is an interface to support dynamic dispatch.
type ICall_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCall_nameContext differentiates from other interfaces.
	IsCall_nameContext()
}

type Call_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCall_nameContext() *Call_nameContext {
	var p = new(Call_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_call_name
	return p
}

func (*Call_nameContext) IsCall_nameContext() {}

func NewCall_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Call_nameContext {
	var p = new(Call_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_call_name

	return p
}

func (s *Call_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Call_nameContext) AllIdentifier() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserIdentifier)
}

func (s *Call_nameContext) Identifier(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, i)
}

func (s *Call_nameContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserDOT)
}

func (s *Call_nameContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserDOT, i)
}

func (s *Call_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Call_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Call_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitCall_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Call_name() (localctx ICall_nameContext) {
	this := p
	_ = this

	localctx = NewCall_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, WdlV1_1ParserRULE_call_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(719)
		p.Match(WdlV1_1ParserIdentifier)
	}
	p.SetState(724)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == WdlV1_1ParserDOT {
		{
			p.SetState(720)
			p.Match(WdlV1_1ParserDOT)
		}
		{
			p.SetState(721)
			p.Match(WdlV1_1ParserIdentifier)
		}

		p.SetState(726)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICallContext is an interface to support dynamic dispatch.
type ICallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallContext differentiates from other interfaces.
	IsCallContext()
}

type CallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallContext() *CallContext {
	var p = new(CallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_call
	return p
}

func (*CallContext) IsCallContext() {}

func NewCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallContext {
	var p = new(CallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_call

	return p
}

func (s *CallContext) GetParser() antlr.Parser { return s.parser }

func (s *CallContext) CALL() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCALL, 0)
}

func (s *CallContext) Call_name() ICall_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICall_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICall_nameContext)
}

func (s *CallContext) Call_alias() ICall_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICall_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICall_aliasContext)
}

func (s *CallContext) AllCall_after() []ICall_afterContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICall_afterContext); ok {
			len++
		}
	}

	tst := make([]ICall_afterContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICall_afterContext); ok {
			tst[i] = t.(ICall_afterContext)
			i++
		}
	}

	return tst
}

func (s *CallContext) Call_after(i int) ICall_afterContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICall_afterContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICall_afterContext)
}

func (s *CallContext) Call_body() ICall_bodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICall_bodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICall_bodyContext)
}

func (s *CallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitCall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Call() (localctx ICallContext) {
	this := p
	_ = this

	localctx = NewCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, WdlV1_1ParserRULE_call)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(727)
		p.Match(WdlV1_1ParserCALL)
	}
	{
		p.SetState(728)
		p.Call_name()
	}
	p.SetState(730)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == WdlV1_1ParserAS {
		{
			p.SetState(729)
			p.Call_alias()
		}

	}
	p.SetState(735)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == WdlV1_1ParserAFTER {
		{
			p.SetState(732)
			p.Call_after()
		}

		p.SetState(737)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(739)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == WdlV1_1ParserLBRACE {
		{
			p.SetState(738)
			p.Call_body()
		}

	}

	return localctx
}

// IScatterContext is an interface to support dynamic dispatch.
type IScatterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsScatterContext differentiates from other interfaces.
	IsScatterContext()
}

type ScatterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyScatterContext() *ScatterContext {
	var p = new(ScatterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_scatter
	return p
}

func (*ScatterContext) IsScatterContext() {}

func NewScatterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ScatterContext {
	var p = new(ScatterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_scatter

	return p
}

func (s *ScatterContext) GetParser() antlr.Parser { return s.parser }

func (s *ScatterContext) SCATTER() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserSCATTER, 0)
}

func (s *ScatterContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLPAREN, 0)
}

func (s *ScatterContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *ScatterContext) In() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIn, 0)
}

func (s *ScatterContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ScatterContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRPAREN, 0)
}

func (s *ScatterContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACE, 0)
}

func (s *ScatterContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *ScatterContext) AllInner_workflow_element() []IInner_workflow_elementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IInner_workflow_elementContext); ok {
			len++
		}
	}

	tst := make([]IInner_workflow_elementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IInner_workflow_elementContext); ok {
			tst[i] = t.(IInner_workflow_elementContext)
			i++
		}
	}

	return tst
}

func (s *ScatterContext) Inner_workflow_element(i int) IInner_workflow_elementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInner_workflow_elementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInner_workflow_elementContext)
}

func (s *ScatterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ScatterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ScatterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitScatter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Scatter() (localctx IScatterContext) {
	this := p
	_ = this

	localctx = NewScatterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, WdlV1_1ParserRULE_scatter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(741)
		p.Match(WdlV1_1ParserSCATTER)
	}
	{
		p.SetState(742)
		p.Match(WdlV1_1ParserLPAREN)
	}
	{
		p.SetState(743)
		p.Match(WdlV1_1ParserIdentifier)
	}
	{
		p.SetState(744)
		p.Match(WdlV1_1ParserIn)
	}
	{
		p.SetState(745)
		p.Expr()
	}
	{
		p.SetState(746)
		p.Match(WdlV1_1ParserRPAREN)
	}
	{
		p.SetState(747)
		p.Match(WdlV1_1ParserLBRACE)
	}
	p.SetState(751)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-7)) & ^0x3f) == 0 && ((int64(1)<<(_la-7))&-9223372036835909625) != 0 {
		{
			p.SetState(748)
			p.Inner_workflow_element()
		}

		p.SetState(753)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(754)
		p.Match(WdlV1_1ParserRBRACE)
	}

	return localctx
}

// IConditionalContext is an interface to support dynamic dispatch.
type IConditionalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionalContext differentiates from other interfaces.
	IsConditionalContext()
}

type ConditionalContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionalContext() *ConditionalContext {
	var p = new(ConditionalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_conditional
	return p
}

func (*ConditionalContext) IsConditionalContext() {}

func NewConditionalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionalContext {
	var p = new(ConditionalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_conditional

	return p
}

func (s *ConditionalContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionalContext) IF() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIF, 0)
}

func (s *ConditionalContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLPAREN, 0)
}

func (s *ConditionalContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ConditionalContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRPAREN, 0)
}

func (s *ConditionalContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACE, 0)
}

func (s *ConditionalContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *ConditionalContext) AllInner_workflow_element() []IInner_workflow_elementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IInner_workflow_elementContext); ok {
			len++
		}
	}

	tst := make([]IInner_workflow_elementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IInner_workflow_elementContext); ok {
			tst[i] = t.(IInner_workflow_elementContext)
			i++
		}
	}

	return tst
}

func (s *ConditionalContext) Inner_workflow_element(i int) IInner_workflow_elementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInner_workflow_elementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInner_workflow_elementContext)
}

func (s *ConditionalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitConditional(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Conditional() (localctx IConditionalContext) {
	this := p
	_ = this

	localctx = NewConditionalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, WdlV1_1ParserRULE_conditional)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(756)
		p.Match(WdlV1_1ParserIF)
	}
	{
		p.SetState(757)
		p.Match(WdlV1_1ParserLPAREN)
	}
	{
		p.SetState(758)
		p.Expr()
	}
	{
		p.SetState(759)
		p.Match(WdlV1_1ParserRPAREN)
	}
	{
		p.SetState(760)
		p.Match(WdlV1_1ParserLBRACE)
	}
	p.SetState(764)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-7)) & ^0x3f) == 0 && ((int64(1)<<(_la-7))&-9223372036835909625) != 0 {
		{
			p.SetState(761)
			p.Inner_workflow_element()
		}

		p.SetState(766)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(767)
		p.Match(WdlV1_1ParserRBRACE)
	}

	return localctx
}

// IWorkflow_inputContext is an interface to support dynamic dispatch.
type IWorkflow_inputContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWorkflow_inputContext differentiates from other interfaces.
	IsWorkflow_inputContext()
}

type Workflow_inputContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWorkflow_inputContext() *Workflow_inputContext {
	var p = new(Workflow_inputContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_workflow_input
	return p
}

func (*Workflow_inputContext) IsWorkflow_inputContext() {}

func NewWorkflow_inputContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Workflow_inputContext {
	var p = new(Workflow_inputContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_workflow_input

	return p
}

func (s *Workflow_inputContext) GetParser() antlr.Parser { return s.parser }

func (s *Workflow_inputContext) INPUT() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserINPUT, 0)
}

func (s *Workflow_inputContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACE, 0)
}

func (s *Workflow_inputContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *Workflow_inputContext) AllAny_decls() []IAny_declsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAny_declsContext); ok {
			len++
		}
	}

	tst := make([]IAny_declsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAny_declsContext); ok {
			tst[i] = t.(IAny_declsContext)
			i++
		}
	}

	return tst
}

func (s *Workflow_inputContext) Any_decls(i int) IAny_declsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_declsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_declsContext)
}

func (s *Workflow_inputContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Workflow_inputContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Workflow_inputContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitWorkflow_input(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Workflow_input() (localctx IWorkflow_inputContext) {
	this := p
	_ = this

	localctx = NewWorkflow_inputContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, WdlV1_1ParserRULE_workflow_input)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(769)
		p.Match(WdlV1_1ParserINPUT)
	}
	{
		p.SetState(770)
		p.Match(WdlV1_1ParserLBRACE)
	}
	p.SetState(774)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-20)) & ^0x3f) == 0 && ((int64(1)<<(_la-20))&1125899906844927) != 0 {
		{
			p.SetState(771)
			p.Any_decls()
		}

		p.SetState(776)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(777)
		p.Match(WdlV1_1ParserRBRACE)
	}

	return localctx
}

// IWorkflow_outputContext is an interface to support dynamic dispatch.
type IWorkflow_outputContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWorkflow_outputContext differentiates from other interfaces.
	IsWorkflow_outputContext()
}

type Workflow_outputContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWorkflow_outputContext() *Workflow_outputContext {
	var p = new(Workflow_outputContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_workflow_output
	return p
}

func (*Workflow_outputContext) IsWorkflow_outputContext() {}

func NewWorkflow_outputContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Workflow_outputContext {
	var p = new(Workflow_outputContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_workflow_output

	return p
}

func (s *Workflow_outputContext) GetParser() antlr.Parser { return s.parser }

func (s *Workflow_outputContext) OUTPUT() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserOUTPUT, 0)
}

func (s *Workflow_outputContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACE, 0)
}

func (s *Workflow_outputContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *Workflow_outputContext) AllBound_decls() []IBound_declsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IBound_declsContext); ok {
			len++
		}
	}

	tst := make([]IBound_declsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IBound_declsContext); ok {
			tst[i] = t.(IBound_declsContext)
			i++
		}
	}

	return tst
}

func (s *Workflow_outputContext) Bound_decls(i int) IBound_declsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBound_declsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBound_declsContext)
}

func (s *Workflow_outputContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Workflow_outputContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Workflow_outputContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitWorkflow_output(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Workflow_output() (localctx IWorkflow_outputContext) {
	this := p
	_ = this

	localctx = NewWorkflow_outputContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, WdlV1_1ParserRULE_workflow_output)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(779)
		p.Match(WdlV1_1ParserOUTPUT)
	}
	{
		p.SetState(780)
		p.Match(WdlV1_1ParserLBRACE)
	}
	p.SetState(784)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-20)) & ^0x3f) == 0 && ((int64(1)<<(_la-20))&1125899906844927) != 0 {
		{
			p.SetState(781)
			p.Bound_decls()
		}

		p.SetState(786)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(787)
		p.Match(WdlV1_1ParserRBRACE)
	}

	return localctx
}

// IWorkflow_elementContext is an interface to support dynamic dispatch.
type IWorkflow_elementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWorkflow_elementContext differentiates from other interfaces.
	IsWorkflow_elementContext()
}

type Workflow_elementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWorkflow_elementContext() *Workflow_elementContext {
	var p = new(Workflow_elementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_workflow_element
	return p
}

func (*Workflow_elementContext) IsWorkflow_elementContext() {}

func NewWorkflow_elementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Workflow_elementContext {
	var p = new(Workflow_elementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_workflow_element

	return p
}

func (s *Workflow_elementContext) GetParser() antlr.Parser { return s.parser }

func (s *Workflow_elementContext) CopyFrom(ctx *Workflow_elementContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Workflow_elementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Workflow_elementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type OutputContext struct {
	*Workflow_elementContext
}

func NewOutputContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *OutputContext {
	var p = new(OutputContext)

	p.Workflow_elementContext = NewEmptyWorkflow_elementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Workflow_elementContext))

	return p
}

func (s *OutputContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OutputContext) Workflow_output() IWorkflow_outputContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWorkflow_outputContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWorkflow_outputContext)
}

func (s *OutputContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitOutput(s)

	default:
		return t.VisitChildren(s)
	}
}

type InputContext struct {
	*Workflow_elementContext
}

func NewInputContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InputContext {
	var p = new(InputContext)

	p.Workflow_elementContext = NewEmptyWorkflow_elementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Workflow_elementContext))

	return p
}

func (s *InputContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InputContext) Workflow_input() IWorkflow_inputContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWorkflow_inputContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWorkflow_inputContext)
}

func (s *InputContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitInput(s)

	default:
		return t.VisitChildren(s)
	}
}

type Parameter_meta_elementContext struct {
	*Workflow_elementContext
}

func NewParameter_meta_elementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Parameter_meta_elementContext {
	var p = new(Parameter_meta_elementContext)

	p.Workflow_elementContext = NewEmptyWorkflow_elementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Workflow_elementContext))

	return p
}

func (s *Parameter_meta_elementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parameter_meta_elementContext) Parameter_meta() IParameter_metaContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParameter_metaContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParameter_metaContext)
}

func (s *Parameter_meta_elementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitParameter_meta_element(s)

	default:
		return t.VisitChildren(s)
	}
}

type Meta_elementContext struct {
	*Workflow_elementContext
}

func NewMeta_elementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Meta_elementContext {
	var p = new(Meta_elementContext)

	p.Workflow_elementContext = NewEmptyWorkflow_elementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Workflow_elementContext))

	return p
}

func (s *Meta_elementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Meta_elementContext) Meta() IMetaContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMetaContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMetaContext)
}

func (s *Meta_elementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitMeta_element(s)

	default:
		return t.VisitChildren(s)
	}
}

type Inner_elementContext struct {
	*Workflow_elementContext
}

func NewInner_elementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Inner_elementContext {
	var p = new(Inner_elementContext)

	p.Workflow_elementContext = NewEmptyWorkflow_elementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Workflow_elementContext))

	return p
}

func (s *Inner_elementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Inner_elementContext) Inner_workflow_element() IInner_workflow_elementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInner_workflow_elementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInner_workflow_elementContext)
}

func (s *Inner_elementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitInner_element(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Workflow_element() (localctx IWorkflow_elementContext) {
	this := p
	_ = this

	localctx = NewWorkflow_elementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, WdlV1_1ParserRULE_workflow_element)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(794)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case WdlV1_1ParserINPUT:
		localctx = NewInputContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(789)
			p.Workflow_input()
		}

	case WdlV1_1ParserOUTPUT:
		localctx = NewOutputContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(790)
			p.Workflow_output()
		}

	case WdlV1_1ParserSCATTER, WdlV1_1ParserCALL, WdlV1_1ParserIF, WdlV1_1ParserBOOLEAN, WdlV1_1ParserINT, WdlV1_1ParserFLOAT, WdlV1_1ParserSTRING, WdlV1_1ParserFILE, WdlV1_1ParserARRAY, WdlV1_1ParserMAP, WdlV1_1ParserOBJECT, WdlV1_1ParserPAIR, WdlV1_1ParserIdentifier:
		localctx = NewInner_elementContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(791)
			p.Inner_workflow_element()
		}

	case WdlV1_1ParserPARAMETERMETA:
		localctx = NewParameter_meta_elementContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(792)
			p.Parameter_meta()
		}

	case WdlV1_1ParserMETA:
		localctx = NewMeta_elementContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(793)
			p.Meta()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IWorkflowContext is an interface to support dynamic dispatch.
type IWorkflowContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWorkflowContext differentiates from other interfaces.
	IsWorkflowContext()
}

type WorkflowContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWorkflowContext() *WorkflowContext {
	var p = new(WorkflowContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_workflow
	return p
}

func (*WorkflowContext) IsWorkflowContext() {}

func NewWorkflowContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WorkflowContext {
	var p = new(WorkflowContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_workflow

	return p
}

func (s *WorkflowContext) GetParser() antlr.Parser { return s.parser }

func (s *WorkflowContext) WORKFLOW() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserWORKFLOW, 0)
}

func (s *WorkflowContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *WorkflowContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACE, 0)
}

func (s *WorkflowContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *WorkflowContext) AllWorkflow_element() []IWorkflow_elementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWorkflow_elementContext); ok {
			len++
		}
	}

	tst := make([]IWorkflow_elementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWorkflow_elementContext); ok {
			tst[i] = t.(IWorkflow_elementContext)
			i++
		}
	}

	return tst
}

func (s *WorkflowContext) Workflow_element(i int) IWorkflow_elementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWorkflow_elementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWorkflow_elementContext)
}

func (s *WorkflowContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WorkflowContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WorkflowContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitWorkflow(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Workflow() (localctx IWorkflowContext) {
	this := p
	_ = this

	localctx = NewWorkflowContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, WdlV1_1ParserRULE_workflow)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(796)
		p.Match(WdlV1_1ParserWORKFLOW)
	}
	{
		p.SetState(797)
		p.Match(WdlV1_1ParserIdentifier)
	}
	{
		p.SetState(798)
		p.Match(WdlV1_1ParserLBRACE)
	}
	p.SetState(802)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-7)) & ^0x3f) == 0 && ((int64(1)<<(_la-7))&-9223372036835905785) != 0 {
		{
			p.SetState(799)
			p.Workflow_element()
		}

		p.SetState(804)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(805)
		p.Match(WdlV1_1ParserRBRACE)
	}

	return localctx
}

// IDocument_elementContext is an interface to support dynamic dispatch.
type IDocument_elementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDocument_elementContext differentiates from other interfaces.
	IsDocument_elementContext()
}

type Document_elementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDocument_elementContext() *Document_elementContext {
	var p = new(Document_elementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_document_element
	return p
}

func (*Document_elementContext) IsDocument_elementContext() {}

func NewDocument_elementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Document_elementContext {
	var p = new(Document_elementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_document_element

	return p
}

func (s *Document_elementContext) GetParser() antlr.Parser { return s.parser }

func (s *Document_elementContext) Import_doc() IImport_docContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImport_docContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImport_docContext)
}

func (s *Document_elementContext) Struct_() IStructContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructContext)
}

func (s *Document_elementContext) Task() ITaskContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITaskContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITaskContext)
}

func (s *Document_elementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Document_elementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Document_elementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitDocument_element(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Document_element() (localctx IDocument_elementContext) {
	this := p
	_ = this

	localctx = NewDocument_elementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, WdlV1_1ParserRULE_document_element)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(810)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case WdlV1_1ParserIMPORT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(807)
			p.Import_doc()
		}

	case WdlV1_1ParserSTRUCT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(808)
			p.Struct_()
		}

	case WdlV1_1ParserTASK:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(809)
			p.Task()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDocumentContext is an interface to support dynamic dispatch.
type IDocumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDocumentContext differentiates from other interfaces.
	IsDocumentContext()
}

type DocumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDocumentContext() *DocumentContext {
	var p = new(DocumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_document
	return p
}

func (*DocumentContext) IsDocumentContext() {}

func NewDocumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DocumentContext {
	var p = new(DocumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_document

	return p
}

func (s *DocumentContext) GetParser() antlr.Parser { return s.parser }

func (s *DocumentContext) Version() IVersionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVersionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVersionContext)
}

func (s *DocumentContext) EOF() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserEOF, 0)
}

func (s *DocumentContext) AllDocument_element() []IDocument_elementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDocument_elementContext); ok {
			len++
		}
	}

	tst := make([]IDocument_elementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDocument_elementContext); ok {
			tst[i] = t.(IDocument_elementContext)
			i++
		}
	}

	return tst
}

func (s *DocumentContext) Document_element(i int) IDocument_elementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDocument_elementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDocument_elementContext)
}

func (s *DocumentContext) Workflow() IWorkflowContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWorkflowContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWorkflowContext)
}

func (s *DocumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DocumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DocumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case WdlV1_1ParserVisitor:
		return t.VisitDocument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *WdlV1_1Parser) Document() (localctx IDocumentContext) {
	this := p
	_ = this

	localctx = NewDocumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, WdlV1_1ParserRULE_document)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(812)
		p.Version()
	}
	p.SetState(816)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&104) != 0 {
		{
			p.SetState(813)
			p.Document_element()
		}

		p.SetState(818)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(826)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == WdlV1_1ParserWORKFLOW {
		{
			p.SetState(819)
			p.Workflow()
		}
		p.SetState(823)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&104) != 0 {
			{
				p.SetState(820)
				p.Document_element()
			}

			p.SetState(825)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(828)
		p.Match(WdlV1_1ParserEOF)
	}

	return localctx
}

func (p *WdlV1_1Parser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 17:
		var t *Expr_infix0Context = nil
		if localctx != nil {
			t = localctx.(*Expr_infix0Context)
		}
		return p.Expr_infix0_Sempred(t, predIndex)

	case 18:
		var t *Expr_infix1Context = nil
		if localctx != nil {
			t = localctx.(*Expr_infix1Context)
		}
		return p.Expr_infix1_Sempred(t, predIndex)

	case 19:
		var t *Expr_infix2Context = nil
		if localctx != nil {
			t = localctx.(*Expr_infix2Context)
		}
		return p.Expr_infix2_Sempred(t, predIndex)

	case 20:
		var t *Expr_infix3Context = nil
		if localctx != nil {
			t = localctx.(*Expr_infix3Context)
		}
		return p.Expr_infix3_Sempred(t, predIndex)

	case 21:
		var t *Expr_infix4Context = nil
		if localctx != nil {
			t = localctx.(*Expr_infix4Context)
		}
		return p.Expr_infix4_Sempred(t, predIndex)

	case 24:
		var t *Expr_coreContext = nil
		if localctx != nil {
			t = localctx.(*Expr_coreContext)
		}
		return p.Expr_core_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *WdlV1_1Parser) Expr_infix0_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *WdlV1_1Parser) Expr_infix1_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *WdlV1_1Parser) Expr_infix2_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 2:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *WdlV1_1Parser) Expr_infix3_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 8:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *WdlV1_1Parser) Expr_infix4_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 10:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *WdlV1_1Parser) Expr_core_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 13:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 14:
		return p.Precpred(p.GetParserRuleContext(), 5)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
